<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>张有亮|个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.whatdy.com/"/>
  <updated>2018-04-05T16:25:55.288Z</updated>
  <id>https://www.whatdy.com/</id>
  
  <author>
    <name>Zhangyouliang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>各种实用的东东</title>
    <link href="https://www.whatdy.com/2018/04/06/%E5%90%84%E7%A7%8D%E5%AE%9E%E7%94%A8%E7%9A%84%E4%B8%9C%E4%B8%9C/"/>
    <id>https://www.whatdy.com/2018/04/06/各种实用的东东/</id>
    <published>2018-04-05T16:25:01.000Z</published>
    <updated>2018-04-05T16:25:55.288Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><ul><li><a href="https://github.com/codeguy/Slim" target="_blank" rel="noopener">Slim</a> - PHP微框架，简单易用易拓展。</li><li><a href="https://github.com/swoole/swoole-src" target="_blank" rel="noopener">Swoole</a> - Swoole是一个PHP的C扩展，可用来开发PHP的高性能高并发TCP/UDP Server。</li><li><a href="https://github.com/guzzle/guzzle" target="_blank" rel="noopener">Guzzle</a> - 强大的RESTful 客户端，支持批量请求。</li><li><a href="https://github.com/jeremeamia/super_closure" target="_blank" rel="noopener">PHP Super Closure</a> -  解决PHP不支持序列化(serialize) <code>Closure</code> 问题。</li><li><a href="https://github.com/visionmedia/php-selector" target="_blank" rel="noopener">PHP Selector</a> - 像jquery选择器一样操作操作网页DOM, 支持大部分CSS3选择器。</li><li><a href="https://github.com/khoaofgod/phpfastcache" target="_blank" rel="noopener">Simple Yet Powerful PHP Caching Class</a> - 好用的PHP缓存类,支持：Files, MemCache, MemCached, APC, WinCache, X-Cache, PDO with SQLite。</li><li><a href="https://github.com/phalcon/zephir" target="_blank" rel="noopener">Zephir</a> - Zephir是一种高级编译语言,为简单编写PHP的C扩展而生。</li><li><a href="https://github.com/davibennun/laravel-push-notification" target="_blank" rel="noopener">Laravel Push Notification</a> - Laravel 推送工具。</li><li><a href="https://github.com/Intervention/image" target="_blank" rel="noopener">Intervention Image</a> - 一个PHP图像处理和操作库，提供更简单和表达方式来创建，编辑和构图。该软件还包括提供服务提供器(ServiceProviders)和外观(Facades)，方便Laravel整合。</li><li><a href="https://github.com/fabpot/Sami" target="_blank" rel="noopener">Sami</a> - PHP API文档生成工具，生成代码注释文档。</li><li><a href="https://github.com/overtrue/socialite" target="_blank" rel="noopener">overtrue/socialite</a> PHP 通用第三方登录组件，支持：微博、QQ、微信公众平台，微信开放平台、豆瓣，Facebook、Google、GitHub、Linkedin。</li><li><a href="https://github.com/overtrue/pinyin" target="_blank" rel="noopener">overtrue/pinyin</a> 史上最准确的PHP中文转拼音工具</li><li><a href="https://github.com/overtrue/wechat" target="_blank" rel="noopener">overtrue/wechat</a> 目前最好用的微信开发工具包</li><li><a href="https://github.com/overtrue/package-builder" target="_blank" rel="noopener">overtrue/package-builder</a> Composer 包构建工具</li></ul><h3 id="Laravel"><a href="#Laravel" class="headerlink" title="Laravel"></a>Laravel</h3><ul><li><a href="https://github.com/overtrue/laravel-shopping-cart" target="_blank" rel="noopener">laravel-shopping-cart</a> - Laravel 购物车，简单方便,文档齐全。</li><li><a href="https://github.com/overtrue/laravel-lang" target="_blank" rel="noopener">laravel-lang</a> - Laravel 语言包，支持 44+ 种语言。</li><li><a href="https://github.com/jenssegers/Laravel-MongoDB" target="_blank" rel="noopener">Laravel-MongoDB</a> - Laravel 的 MongoDB 数据库组件</li><li><a href="https://github.com/overtrue/laravel-pinyin" target="_blank" rel="noopener">laravel-pinyin</a> - Laravel 的中文转拼音插件，基于<a href="https://github.com/overtrue/pinyin" target="_blank" rel="noopener">overtrue/pinyin</a></li><li><a href="https://github.com/overtrue/laravel-wechat" target="_blank" rel="noopener">laravel-wechat</a> - Laravel 的微信开发组件，基于<a href="https://github.com/overtrue/wechat" target="_blank" rel="noopener">overtrue/wechat</a></li></ul><h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><ul><li><a href="http://phpjs.org/" target="_blank" rel="noopener">phpjs</a> - PHP函数的js实现。</li><li><a href="https://github.com/jprichardson/string.js" target="_blank" rel="noopener">string.js</a> - 轻量级(&lt;5kb)的JavaScript字符串操作库，强大的字符串处理API。</li><li><a href="https://github.com/jashkenas/underscore" target="_blank" rel="noopener">underscore</a> - 强大的js函数库，提供超多易用的封装。</li><li><a href="http://jedfoster.com/Readmore.js" target="_blank" rel="noopener">readmore.js</a> -  隐藏过长的文章。按高度隐藏的，如果担心Feed流里边因为某篇文章特别长，影响浏览时可以用上。支持bower，install readmore 即可。</li><li><a href="https://github.com/overtrue/share.js" target="_blank" rel="noopener">share.js</a> -  一键分享到微博、QQ空间、QQ好友、微信、腾讯微博、豆瓣、Facebook、Twitter、Linkedin、Google+、点点等社交网站。</li><li><a href="https://github.com/idiot/unslider" target="_blank" rel="noopener">Unslider</a> - 简单易用的jQuery slider 插件。</li><li><a href="http://aroc.github.io/side-comments-demo/" target="_blank" rel="noopener">SideComments.js</a> - 类似Medium.com的文本边栏评论插件。</li><li><a href="https://github.com/michael/github" target="_blank" rel="noopener">Github.js</a> - GitHub API js版本。</li><li><a href="https://github.com/moment/moment" target="_blank" rel="noopener">Moment.js</a> - 提供在JavaScript中分析，验证，操作和显示日期的API。</li><li><a href="https://github.com/cheeriojs/cheerio" target="_blank" rel="noopener">cheerio</a> - 专为服务器端设计的，快速，灵活，精益的jQuery核心功能实现。</li><li><a href="https://github.com/chjj/marked" target="_blank" rel="noopener">marked</a> - 一个高效的Markdown分析器和编译器。</li><li><a href="https://github.com/evilstreak/markdown-js" target="_blank" rel="noopener">markdown-js</a> - JavaScript Mardown 解析器。</li><li><a href="https://github.com/fgnass/spin.js" target="_blank" rel="noopener">Spin.js</a> - “加载中” 动画生成工具。</li><li><a href="https://github.com/hassankhan/emojify.js" target="_blank" rel="noopener">emojify.js</a> - 超简单的让你的网页支持emoji表情。</li><li><a href="https://highlightjs.org/" target="_blank" rel="noopener">highlightjs</a> - 代码高亮。</li><li><a href="https://github.com/fengyuanchen/distpicker" target="_blank" rel="noopener">fengyuanchen/distpicker</a> - 中国省市区三级联动，强大的自定义功能。</li></ul><h5 id="表单美化"><a href="#表单美化" class="headerlink" title="表单美化"></a>表单美化</h5><ul><li><a href="https://github.com/abpetkov/switchery" target="_blank" rel="noopener">switchery</a> - IOS7风格的checkbox美化插件，demo: <a href="http://abpetkov.github.io/switchery/。" target="_blank" rel="noopener">http://abpetkov.github.io/switchery/。</a></li><li><a href="https://github.com/harvesthq/chosen" target="_blank" rel="noopener">chosen</a> - 下拉框美化强化插件，demo: <a href="http://harvesthq.github.io/chosen/。" target="_blank" rel="noopener">http://harvesthq.github.io/chosen/。</a></li><li><a href="https://github.com/firstopinion/formatter.js" target="_blank" rel="noopener">formatter.js</a> - 强大输入框格式化插件，指定输入框可输入的格式。</li><li><a href="https://github.com/fronteed/iCheck" target="_blank" rel="noopener">iCheck</a> - 高度可定制的复选框和单选按钮 (jQuery &amp; Zepto)。</li></ul><h5 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h5><ul><li><a href="http://ionicframework.com/" target="_blank" rel="noopener">ionic</a> - 混合应用开发框架，使用html+javascript+css创建Android与IOS应用。</li></ul><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ul><li><a href="https://github.com/sofish/typo.css" target="_blank" rel="noopener">typo.css</a> - 中文网页重设与排版，一致化浏览器排版效果，构建最适合中文阅读的网页排版。</li></ul><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2><ul><li><a href="https://github.com/fex-team/styleguide/blob/master/project.md" target="_blank" rel="noopener">开源项目目录规范</a></li><li><a href="https://github.com/fex-team/styleguide/blob/master/javascript.md" target="_blank" rel="noopener">JavaScript编码规范</a></li><li><a href="https://github.com/fex-team/styleguide/blob/master/css.md" target="_blank" rel="noopener">CSS 编码规范</a></li><li><a href="https://github.com/fex-team/styleguide/blob/master/html.md" target="_blank" rel="noopener">HTML 编码规范</a></li><li><a href="https://github.com/fex-team/styleguide/blob/master/markdown.md" target="_blank" rel="noopener">Markdown 编写规范</a></li></ul><h2 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h2><ul><li><a href="https://github.com/driftyco/ionicons" target="_blank" rel="noopener">ionicons</a> - ionic图标。</li><li><a href="http://emoji.muan.co/" target="_blank" rel="noopener">emoji查询</a>,<a href="http://www.emoji-cheat-sheet.com/" target="_blank" rel="noopener">emoji-cheat-sheet</a> - emoji查询。</li><li><a href="https://github.com/hassankhan/emojify.js" target="_blank" rel="noopener">emojify.js</a> - 让你的网页支持emoji表情。</li></ul><h2 id="前端工具"><a href="#前端工具" class="headerlink" title="前端工具"></a>前端工具</h2><ul><li><a href="https://github.com/fex-team/fis" target="_blank" rel="noopener">FIS</a> - Front-end Integrated Solution - 前端集成解决方案。</li><li><a href="https://github.com/nkashyap/console.io" target="_blank" rel="noopener">JavaScript的远程Web控制台</a> - Console.IO是一个NodeJS项目。它为网站和Web应用程序提供的远程Web控制台。它采用express.io（express和socket.io）提供用户实时体验。  它能工作在几乎所有的现代浏览器，移动设备，智能电视等平台。</li><li><a href="http://ecd.tencent.com/css3/tools.html" target="_blank" rel="noopener">CSS3动画生成工具</a> - 在线制作&amp;预览CSS3动画。</li></ul><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><ul><li><a href="https://github.com/kazuho/h2o" target="_blank" rel="noopener">H2O</a> - 比nginx快2倍的web服务器。</li><li><a href="https://github.com/Qihoo360/Atlas" target="_blank" rel="noopener">Atlas</a> - 基于MySQL协议的数据库中间层项目。</li></ul><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><ul><li><a href="https://github.com/benweet/stackedit" target="_blank" rel="noopener">StackEdit</a> - 强大的在线Markdown编辑器，在线地址：<a href="https://stackedit.io/。" target="_blank" rel="noopener">https://stackedit.io/。</a></li><li><a href="https://github.com/kkga/spacegray" target="_blank" rel="noopener">Spacegray</a> - 特别漂亮的Sublime Text主题，建议与<code>Monaco</code>字体配合使用。</li><li><a href="http://colorsublime.com/" target="_blank" rel="noopener">Colorsublime</a> - 超多Sublime Text主题。</li></ul><h2 id="Sublime-text-插件"><a href="#Sublime-text-插件" class="headerlink" title="Sublime text 插件"></a>Sublime text 插件</h2><ul><li><a href="http://wbond.net/sublime_packages/alignment" target="_blank" rel="noopener">Alignment</a> - 代码对齐工具，根据=号对齐以及其它定义的符号竖向对齐你的代码。</li><li><a href="https://github.com/SublimeText/EncodingHelper" target="_blank" rel="noopener">EncodingHelper</a> - 在状态栏显示当前文件的编码，支持从其它编码转为UTF-8。</li><li><a href="https://github.com/titoBouzout/SideBarEnhancements" target="_blank" rel="noopener">SideBarEnhancement</a> - 边栏菜单增强工具。</li><li><a href="https://github.com/sublimetext/tag" target="_blank" rel="noopener">Tag</a> - html标签助手。</li><li><a href="https://github.com/alienhard/SublimeAllAutocomplete" target="_blank" rel="noopener">All Autocomplete</a> - 在当前打开的文件中提示函数，方法名等。</li><li><a href="https://github.com/spadgos/sublime-jsdocs" target="_blank" rel="noopener">DocBlockr</a> - 自动注释工具。</li><li><a href="https://github.com/dzhibas/SublimePrettyJson" target="_blank" rel="noopener">Pretty JSON</a> - json格式化工具，快捷键：OSX: cmd+ctl+j, win: ctl+alt+j。</li><li><a href="http://weslly.github.io/ColorPicker/" target="_blank" rel="noopener">ColorPicker</a> - 直接在sublime里调用调色板的工具。</li><li><a href="http://ipestov.com/the-best-plugins-for-sublime-text/" target="_blank" rel="noopener">Emmet</a> - 高效编写HTML的工具，原zen-coding。</li><li><a href="https://github.com/BoundInCode/AutoFileName" target="_blank" rel="noopener">AutoFileName</a> - 自动完成路径的文件 - 非常方便。</li><li><a href="https://github.com/kemayo/sublime-text-git" target="_blank" rel="noopener">Git</a> - 顾名思义。</li><li><a href="https://github.com/jisaacks/GitGutter" target="_blank" rel="noopener">GitGutter</a> - 在边栏高亮你的文件内容变动，增加，删除，修改，类似git diff一样的效果。</li><li><a href="https://github.com/gornostal/Modific" target="_blank" rel="noopener">Modific</a> - 与上一个插件基本一样。</li><li><a href="https://sublimall.org/" target="_blank" rel="noopener">Sublimall</a> - 免费的Sublime备份与同步工具，只需要一个账户，你的插件，配置，打开的文件等都会自动同步。</li><li><a href="https://github.com/ttscoff/MarkdownEditing" target="_blank" rel="noopener">MarkdownEditing</a> - Markdown编写的最好插件：语法高亮，缩写，自动完成，配色方案等</li><li><a href="http://wbond.net/sublime_packages/sftp" target="_blank" rel="noopener">Sublime SFTP</a> - SFTP工具。</li><li><a href="https://github.com/SublimeText/CTags" target="_blank" rel="noopener">CTags</a> - 自动提示工具。</li><li><a href="http://github.com/SublimeLinter/SublimeLinter" target="_blank" rel="noopener">SublimeLinter</a> - 语法检测工具，支持： C/C++, Java, Python, PHP, JS, HTML, CSS等。</li><li><a href="https://github.com/csscomb/sublime-csscomb" target="_blank" rel="noopener">CSScomb</a> - CSS编码风格格式化工具。</li><li><a href="https://github.com/jshint/fixmyjs" target="_blank" rel="noopener">FixMyJS</a>, <a href="https://github.com/paulirish/sublime-jsfmt" target="_blank" rel="noopener">Jsfmt</a> 与 <a href="https://github.com/jdc0589/JsFormat" target="_blank" rel="noopener">JsFormat</a> - Js/JSON编码风格格式化工具</li><li><a href="https://github.com/timonwong/SublimeAStyleFormatter" target="_blank" rel="noopener">AStyleFormatter</a> - C/C++/C#/Java 编码风格格式化工具</li><li><a href="https://github.com/jorgeatgu/SVG-Snippets" target="_blank" rel="noopener">SVG-Snippets</a> - 设置自定义SVG片段。</li><li><a href="https://github.com/rmaksim/Sublime-Text-2-Inc-Dec-Value" target="_blank" rel="noopener">Inc-Dec-Value</a> - 数字，日期，十六进制颜色值等的递增/递减.</li></ul><h2 id="书籍与教程"><a href="#书籍与教程" class="headerlink" title="书籍与教程"></a>书籍与教程</h2><ul><li><a href="https://github.com/numbbbbb/the-swift-programming-language-in-chinese" target="_blank" rel="noopener">《The Swift Programming Language》</a> - 中文版 Apple 官方 Swift 教程。</li><li><a href="https://github.com/julycoding/The-Art-Of-Programming-By-July" target="_blank" rel="noopener">《程序员编程艺术 — 面试和算法心得》</a> - CSDN 600万博客结构之法算法之道部分经典博文优化版。</li><li><a href="https://github.com/bolasblack/api-guide" target="_blank" rel="noopener">RESTful API 接口设计指北</a> - 不错的API设计教程。</li><li><a href="https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md" target="_blank" rel="noopener">GitHub秘籍</a> - GitHub秘籍</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li><a href="https://github.com/ideawu/icomet" target="_blank" rel="noopener">icomet</a> - 一个支持百万并发连接的comet服务器：icomet。</li><li><a href="https://github.com/rogerwang/node-webkit" target="_blank" rel="noopener">node-webkit</a> -基于chromium和nodejs的应用，允许你使用html+javascript开发桌面应用。</li><li><a href="https://github.com/coolwanglu/pdf2htmlEX" target="_blank" rel="noopener">pdf2htmlEX</a> - 转换PDF为Html。</li><li><a href="https://highlightjs.org/" target="_blank" rel="noopener">highlightjs</a> - 代码高亮。</li></ul><p>##</p><p>参考:<a href="http://overtrue.me/articles/2014/10/bookmarks.html" target="_blank" rel="noopener">http://overtrue.me/articles/2014/10/bookmarks.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PHP&quot;&gt;&lt;a href=&quot;#PHP&quot; class=&quot;headerlink&quot; title=&quot;PHP&quot;&gt;&lt;/a&gt;PHP&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/codeguy/Slim&quot; target=&quot;_blank&quot; re
      
    
    </summary>
    
      <category term="php" scheme="https://www.whatdy.com/categories/php/"/>
    
    
      <category term="php" scheme="https://www.whatdy.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>nginx 重写规则</title>
    <link href="https://www.whatdy.com/2018/04/05/nginx-%E9%87%8D%E5%86%99%E8%A7%84%E5%88%99/"/>
    <id>https://www.whatdy.com/2018/04/05/nginx-重写规则/</id>
    <published>2018-04-05T09:25:35.000Z</published>
    <updated>2018-04-05T09:27:41.494Z</updated>
    
    <content type="html"><![CDATA[<p>nginx rewrite 指令执行顺序</p><h3 id="rewrite"><a href="#rewrite" class="headerlink" title="# rewrite"></a># rewrite</h3><ul><li>执行server块的rewrite指令(这里的块指的是server关键字后{}包围的区域)</li><li>执行 location 匹配</li><li>执行选定的location中的rewrite指令</li></ul><p>如果其中某步<code>URI</code>被重写,则重新循环执行<code>1~3</code>,直到找到真正的文件.如果循环超过<code>10</code>次,则出现<code>500 Internal Server Error 错误</code></p><p>flag 标志位:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite regex URL [flag];</span><br></pre></td></tr></table></figure><p><code>rewrite</code> 是关键字，<code>regex</code> 是正则表达式，<code>URL</code>是要替代的内容，<code>[flag]</code>是标记位的意思，它有以下几种值：</p><ul><li><code>last</code>: 相当于Apache的<code>[L]</code>标记，表示<code>完成rewrite</code></li><li><code>break</code>: 停止执行当前虚拟主机的后续rewrite指令集</li><li><code>redirect</code>: 返回<code>302临时重定向</code>，地址栏会显示跳转后的地址</li><li><code>permanent</code>: 返回<code>301永久重定向</code>，地址栏会显示跳转后的地址</li></ul><h3 id="location的用法"><a href="#location的用法" class="headerlink" title="# location的用法"></a># location的用法</h3><p><code>location ~* /js/.*/\.js</code><br>以 <code>=</code> 开头，表示精确匹配；如只匹配根目录结尾的请求，后面不能带任何字符串。<br>以<code>^~</code> 开头，表示uri以某个常规字符串开头，不是正则匹配<br>以<code>~</code> 开头，表示区分大小写的正则匹配;<br>以<code>~*</code> 开头，表示不区分大小写的正则匹配<br>以<code>/</code> 开头，通用匹配, 如果没有其它匹配,任何请求都会匹配到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location / &#123; </span><br><span class="line">    # Redirect everything that isn&apos;t a real file to index.php</span><br><span class="line">    try_files $uri $uri/ /index.php$is_args$args;  &lt;==&gt;  try_files $uri $uri/ /index.php?$query_string;</span><br><span class="line">&#125;</span><br><span class="line"># 或者 </span><br><span class="line">rewrite ^/(.*)$ /index.php/$1 last;</span><br></pre></td></tr></table></figure><p>优先级:  (location = 精准匹配) &gt; (location 完整路径) &gt; (location ^~ 路径) &gt; (location ~,~* 正则顺序) &gt; (location 部分起始路径) &gt; (/)</p><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 这里是直接转发给后端应用服务器了，也可以是一个静态首页</span><br><span class="line"># 第一个必选规则</span><br><span class="line">location = / &#123;</span><br><span class="line">    proxy_pass  http://tomcat:8080/index</span><br><span class="line">&#125;</span><br><span class="line"># 第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项</span><br><span class="line"># 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用</span><br><span class="line">location ^~ /static/ &#123;</span><br><span class="line">    root /webroot/static/;</span><br><span class="line">&#125;</span><br><span class="line">location ~* \.(gif|jpg|jpeg|png|css|js|ico)$ &#123;</span><br><span class="line">    root /webroot/res/;</span><br><span class="line">&#125;</span><br><span class="line"># 第三个规则就是通用规则，用来转发动态请求到后端应用服务器</span><br><span class="line">location / &#123;</span><br><span class="line">    proxy_pass  http://tomcat:8080/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="if-判断指令"><a href="#if-判断指令" class="headerlink" title="# if 判断指令"></a># if 判断指令</h4><p>当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false<br>直接比较变量和内容时，使用=或!=<br><code>~</code>  正则表达式匹配<br><code>~*</code> 不区分大小写的匹配<br><code>!~</code>  区分大小写的不匹配<br><code>-f</code>和<code>!-f</code>  用来判断是否存在文件<br><code>-d</code>和<code>!-d</code>  用来判断是否存在目录<br><code>-e</code>和<code>!-e</code>  用来判断是否存在文件或目录<br><code>-x</code>和<code>!-x</code>  用来判断文件是否可执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">if ($http_user_agent ~ MSIE) &#123;</span><br><span class="line">    rewrite ^(.*)$ /msie/$1 break;</span><br><span class="line">&#125; //如果UA包含&quot;MSIE&quot;，rewrite请求到/msid/目录下</span><br><span class="line"></span><br><span class="line">if ($http_cookie ~* &quot;id=([^;]+)(?:;|$)&quot;) &#123;</span><br><span class="line">    set $id $1;</span><br><span class="line"> &#125; //如果cookie匹配正则，设置变量$id等于正则引用部分</span><br><span class="line"></span><br><span class="line">if ($request_method = POST) &#123;</span><br><span class="line">    return 405;</span><br><span class="line">&#125; //如果提交方法为POST，则返回状态405（Method not allowed）。return不能返回301,302</span><br><span class="line"></span><br><span class="line">if ($slow) &#123;</span><br><span class="line">    limit_rate 10k;</span><br><span class="line">&#125; //限速，$slow可以通过 set 指令设置</span><br><span class="line"></span><br><span class="line">if (!-f $request_filename)&#123;</span><br><span class="line">    break;</span><br><span class="line">    proxy_pass  http://127.0.0.1; </span><br><span class="line">&#125; //如果请求的文件名不存在，则反向代理到localhost 。这里的break也是停止rewrite检查</span><br><span class="line"></span><br><span class="line">if ($args ~ post=140)&#123;</span><br><span class="line">    rewrite ^ http://mysite.com/ permanent;</span><br><span class="line">&#125; //如果query string中包含&quot;post=140&quot;，永久重定向到mysite.com</span><br></pre></td></tr></table></figure><p>if指令中，可以使用全局变量，这些变量有：<br><code>$args</code>： #这个变量等于请求行中的参数，同$query_string<br><code>$content_length</code>： 请求头中的Content-length字段。<br><code>$content_type</code>： 请求头中的Content-Type字段。<br><code>$document_root</code>： 当前请求在root指令中指定的值。<br><code>$host</code>： 请求主机头字段，否则为服务器名称。<br><code>$http_user_agent</code>： 客户端agent信息<br><code>$http_cookie</code>： 客户端cookie信息<br><code>$limit_rate</code>： 这个变量可以限制连接速率。<br><code>$request_method</code>： 客户端请求的动作，通常为GET或POST。<br><code>$remote_addr</code>： 客户端的IP地址。<br><code>$remote_port</code>： 客户端的端口。<br><code>$remote_user</code>： 已经经过Auth Basic Module验证的用户名。<br><code>$request_filename</code>： 当前请求的文件路径，由root或alias指令与URI请求生成。<br><code>$scheme</code>： HTTP协议（如http，https）。<br><code>$server_protocol</code>： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。<br><code>$server_addr</code>： 服务器地址，在完成一次系统调用后可以确定这个值。<br><code>$server_name</code>： 服务器名称。<br><code>$server_port</code>： 请求到达服务器的端口号。<br><code>$request_uri</code>： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。<br><code>$uri</code>： 不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。<br><code>$document_uri</code>： 与$uri相同。<br><code>$query_string</code>： 请求参数,不写GET会接收不到参数(get 参数丢失往往都是因为他)。<br><code>$is_args</code> 如果<code>$args</code>设置，值为”?”，否则为””。<br><code>$uri</code> 请求中的当前URI(不带请求参数，参数位于$args)<br><code>$args</code> 这个变量等于GET请求中的参数。例如，foo=123&amp;bar=blahblah;这个变量只可以被修改</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;nginx rewrite 指令执行顺序&lt;/p&gt;
&lt;h3 id=&quot;rewrite&quot;&gt;&lt;a href=&quot;#rewrite&quot; class=&quot;headerlink&quot; title=&quot;# rewrite&quot;&gt;&lt;/a&gt;# rewrite&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;执行server块的re
      
    
    </summary>
    
    
      <category term="nginx" scheme="https://www.whatdy.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>git 常用命令</title>
    <link href="https://www.whatdy.com/2018/03/31/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://www.whatdy.com/2018/03/31/git-常用命令/</id>
    <published>2018-03-31T13:34:40.000Z</published>
    <updated>2018-04-02T10:07:06.802Z</updated>
    
    <content type="html"><![CDATA[<h3 id="tag"><a href="#tag" class="headerlink" title="# tag"></a># tag</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git tag 显示已经有的标签</span><br><span class="line">git tag -l &apos;v1.0.*&apos; 匹配标签</span><br><span class="line">git tag -a v1.0.0 -m &apos;connotated&apos;  含附注的标签</span><br><span class="line">git tag v1.0.0 创建轻量标签</span><br><span class="line">git show v1.0.0 查看标签</span><br><span class="line">git push origin v1.0.0 标签分享</span><br><span class="line">git push origin --tags 分享全部标签</span><br></pre></td></tr></table></figure><h3 id="git-ls-remote"><a href="#git-ls-remote" class="headerlink" title="# git ls-remote"></a># git ls-remote</h3><p>查看远程仓库情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git ls-remote --tags 查看远程tag情况</span><br><span class="line">git ls-remote --get-url 查看远程 url</span><br></pre></td></tr></table></figure></p><h3 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="# cherry-pick"></a># cherry-pick</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick  &lt;commit id&gt; 提交单个commit 到当前分支</span><br></pre></td></tr></table></figure><h3 id="git-fetch-git-rebase-git-pull"><a href="#git-fetch-git-rebase-git-pull" class="headerlink" title="# git fetch , git rebase,git pull"></a># git fetch , git rebase,git pull</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git fetch 从远程拉去信息到本地仓库</span><br><span class="line">git pull 从远程拉去信息到本地仓库和工作区域</span><br><span class="line">git fetch origin master 拉去 origin 上面的 master 分支信息(--all 拉去全部远程仓库数据)</span><br><span class="line">git rebase origin/master 合并 origin/master 到本地工作区</span><br></pre></td></tr></table></figure><h3 id="clean"><a href="#clean" class="headerlink" title="# clean"></a># clean</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout . &amp;&amp; git clean -xdf 删除当前全部没有提交的数据</span><br></pre></td></tr></table></figure><h3 id="checkout"><a href="#checkout" class="headerlink" title="# checkout"></a># checkout</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature-1 origin/master 根据远程分支的基础上分化出一个新的分支来</span><br><span class="line">git checkout &lt;file&gt; 从暂存区恢复文件</span><br></pre></td></tr></table></figure><h3 id="push"><a href="#push" class="headerlink" title="# push  **"></a># push  **</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [远程名] :[分支名] # git push origin :serverfix</span><br></pre></td></tr></table></figure><p>删除远程分支名,但是保留本地 commit,<strong>git push [远程名] [本地分支]:[远程分支] 语法，如果省略[本地分支]，那就等于是在说“在这里提取空白然后把它变成[远程分支]”。</strong></p><h3 id="rm"><a href="#rm" class="headerlink" title="# rm"></a># rm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached &lt;file&gt; 解除对改文件的 tracked</span><br><span class="line">git reset HEAD &lt;file&gt; 从暂存区删除该文件</span><br></pre></td></tr></table></figure><h3 id="stash"><a href="#stash" class="headerlink" title="# stash"></a># stash</h3><p><strong>注意只能暂存添加到 stage 当中的数据</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git stash 可用来暂存当前正在进行的工作</span><br><span class="line">git stash pop 取出,并且删除最后一次 stash 的数据</span><br><span class="line">git stash save &quot;work in progress for foo feature&quot; 添加注释</span><br><span class="line">git stash list 查看 stash 列表</span><br></pre></td></tr></table></figure></p><h3 id="git-相关别名"><a href="#git-相关别名" class="headerlink" title="# git 相关别名"></a># git 相关别名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">alias.st=status</span><br><span class="line">alias.co=checkout</span><br><span class="line">alias.ci=commit</span><br><span class="line">alias.br=branch</span><br><span class="line">alias.lg=log --color --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&apos; --abbrev-commit</span><br><span class="line">alias.unstage=reset HEAD</span><br><span class="line">alias.last=log -1</span><br></pre></td></tr></table></figure><h3 id="rebase-merge"><a href="#rebase-merge" class="headerlink" title="# rebase , merge"></a># rebase , merge</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> o---o---o---o---o  master</span><br><span class="line">                    \</span><br><span class="line">                     o---o---o---o---o  next</span><br><span class="line">                                      \</span><br><span class="line">                                       o---o---o  topic</span><br><span class="line"></span><br><span class="line"># 将 topic 与 next 不同部分 衍合到 master 分支当中,注意不衍合 topic 和next 共有部分!!!  (这里功能是合并topic 特有的三个 commit )</span><br><span class="line"># git rebase --onto master next topic</span><br><span class="line"># git merge topic # on master branch</span><br><span class="line"></span><br><span class="line"> o---o---o---o---o  master</span><br><span class="line">                   |       \</span><br><span class="line">                   |        o&apos;--o&apos;--o&apos;  topic</span><br><span class="line">                    \</span><br><span class="line">                     o---o---o---o---o  next</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 测试完毕 next 分支,再把 next 分支衍合</span><br><span class="line"></span><br><span class="line">git rebase master next </span><br><span class="line"></span><br><span class="line"># git merge next # on master branch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 上面提到的,如果我们打算将 topic 分支与 master 合并,可以使用下面两个命令</span><br><span class="line"># on master branch </span><br><span class="line">git merge topic </span><br><span class="line">git rebase topic</span><br></pre></td></tr></table></figure><h3 id="git-rebase-多人开发"><a href="#git-rebase-多人开发" class="headerlink" title="#  git rebase 多人开发"></a>#  git rebase 多人开发</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># dev</span><br><span class="line"># git pull ==&gt; git fech origin master &amp;&amp; git merge origin/master</span><br><span class="line"># git rebase origin master 我在本地的分支 dev_branch上， 对远程仓库（默认origin代表远程仓库）的 master 使用变基拣选操作</span><br><span class="line"># git rebase master 对本地仓库的master使用变基拣选操作</span><br><span class="line"></span><br><span class="line">git pull --rebase origin master</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git co master &amp;&amp; git merge dev &amp;&amp; git push</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#  momo</span><br><span class="line"># git pull = git fetch + git merge</span><br><span class="line"># git pull --rebase = git fetch + git rebase</span><br><span class="line"></span><br><span class="line">git pull --rebase origin master</span><br><span class="line"></span><br><span class="line">git checkout master &amp;&amp; git merge momo &amp;&amp; git push</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;tag&quot;&gt;&lt;a href=&quot;#tag&quot; class=&quot;headerlink&quot; title=&quot;# tag&quot;&gt;&lt;/a&gt;# tag&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="git" scheme="https://www.whatdy.com/categories/git/"/>
    
    
      <category term="git" scheme="https://www.whatdy.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>docker+supervisor 实现后台运行程序</title>
    <link href="https://www.whatdy.com/2018/03/31/docker-supervisor-%E5%AE%9E%E7%8E%B0%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E7%A8%8B%E5%BA%8F/"/>
    <id>https://www.whatdy.com/2018/03/31/docker-supervisor-实现后台运行程序/</id>
    <published>2018-03-31T06:50:51.000Z</published>
    <updated>2018-03-31T07:00:12.101Z</updated>
    
    <content type="html"><![CDATA[<p><strong>注意 supervisor 不支持任何的 python3</strong></p><p><strong> 基础镜像构建</strong><br>Dockerfile<br><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.6</span>.<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="bash">COPY requirements.txt /app</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 由于本身代码是 py3的,所以这里另外安装一个 py2 </span></span></span><br><span class="line"><span class="bash">RUN pip install --trusted-host pypi.python.org -r requirements.txt \</span></span><br><span class="line"><span class="bash">    &amp;&amp; pip install virtualenv \</span></span><br><span class="line"><span class="bash">    &amp;&amp; virtualenv --system-site-packages -p python2.7 /opt/python2.7 \</span></span><br><span class="line"><span class="bash">    &amp;&amp; /opt/python2.7/bin/pip install supervisor \</span></span><br><span class="line"><span class="bash">    &amp;&amp; /opt/python2.7/bin/echo_supervisord_conf &gt; /etc/supervisord.conf</span></span><br></pre></td></tr></table></figure></p><p>requirements.txt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">APScheduler==3.5.1</span><br><span class="line">configparser==3.5.0</span><br><span class="line">DBUtils==1.2</span><br><span class="line">PyMySQL==0.8.0</span><br><span class="line">requests==2.18.4</span><br><span class="line">... 其他的包</span><br></pre></td></tr></table></figure></p><p>镜像构建: <code>docker build -t test:latest .</code></p><p>文件目录结构:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── app.py</span><br><span class="line">├── docker</span><br><span class="line">│   ├── config.sh</span><br><span class="line">│   ├── start.sh</span><br><span class="line">│   └── supervisor</span><br><span class="line">│       └── cron.conf</span><br></pre></td></tr></table></figure></p><p>这里其实我是为了启动 <code>app.py</code> 文件的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># start.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">#根据环境变量启动镜像</span><br><span class="line">/docker/config.sh</span><br><span class="line">#启动守护</span><br><span class="line">/opt/python2.7/bin/supervisord -c /etc/supervisord.conf</span><br><span class="line"></span><br><span class="line"># config.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">sed -i -e &quot;s/nodaemon=false/nodaemon=true /g&quot; /etc/supervisord.conf</span><br><span class="line">sed -i -e &quot;s/;\[include\]/\[include\]/g&quot; /etc/supervisord.conf</span><br><span class="line">echo &apos;files=/docker/supervisor/*.conf&apos; &gt;&gt;  /etc/supervisord.conf</span><br><span class="line"></span><br><span class="line"># cron.conf</span><br><span class="line">[program:cron]</span><br><span class="line">command=/usr/local/bin/python /app/app.py</span><br><span class="line">autorestart=true</span><br><span class="line">stdout_events_enabled=true</span><br><span class="line">stderr_events_enabled=true</span><br><span class="line"></span><br><span class="line"># Dockerfile</span><br><span class="line"></span><br><span class="line">FROM test:latest</span><br><span class="line">MAINTAINER YouliangZhang &lt;1577121881@qq.com&gt;</span><br><span class="line"></span><br><span class="line"># ------------------------------------------------------------------------------</span><br><span class="line"># Provision the server</span><br><span class="line"># ------------------------------------------------------------------------------</span><br><span class="line">RUN mkdir /docker</span><br><span class="line">ADD docker /docker</span><br><span class="line"></span><br><span class="line">ADD . /app</span><br><span class="line">RUN chmod a+x /docker/*.sh</span><br><span class="line"></span><br><span class="line"># Use Supervisor to run and manage all other services</span><br><span class="line">CMD [&quot;/docker/start.sh&quot;]</span><br></pre></td></tr></table></figure><p>镜像构建: <code>docker build -t xx:latest .</code><br>镜像启动: <code>docker run -d xx:latest --name xx</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;注意 supervisor 不支持任何的 python3&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 基础镜像构建&lt;/strong&gt;&lt;br&gt;Dockerfile&lt;br&gt;&lt;figure class=&quot;highlight docker&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="docker" scheme="https://www.whatdy.com/categories/docker/"/>
    
      <category term="python" scheme="https://www.whatdy.com/categories/docker/python/"/>
    
    
      <category term="docker" scheme="https://www.whatdy.com/tags/docker/"/>
    
      <category term="python" scheme="https://www.whatdy.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 实用技巧</title>
    <link href="https://www.whatdy.com/2018/03/31/python-%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>https://www.whatdy.com/2018/03/31/python-实用技巧/</id>
    <published>2018-03-31T06:33:19.000Z</published>
    <updated>2018-03-31T06:34:05.670Z</updated>
    
    <content type="html"><![CDATA[<h3 id="dict-合并"><a href="#dict-合并" class="headerlink" title="# dict 合并"></a># dict 合并</h3><ul><li>update()</li><li>d3 = dict(d1.**d2)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;dict-合并&quot;&gt;&lt;a href=&quot;#dict-合并&quot; class=&quot;headerlink&quot; title=&quot;# dict 合并&quot;&gt;&lt;/a&gt;# dict 合并&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;update()&lt;/li&gt;
&lt;li&gt;d3 = dict(d1.**d2)&lt;/li
      
    
    </summary>
    
      <category term="python" scheme="https://www.whatdy.com/categories/python/"/>
    
    
      <category term="python" scheme="https://www.whatdy.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>linux 实用命令</title>
    <link href="https://www.whatdy.com/2018/03/31/linux-%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://www.whatdy.com/2018/03/31/linux-实用命令/</id>
    <published>2018-03-31T06:30:01.000Z</published>
    <updated>2018-03-31T06:38:41.880Z</updated>
    
    <content type="html"><![CDATA[<h3 id="sed"><a href="#sed" class="headerlink" title="# sed"></a># sed</h3><p>比如，我想替换文件中的 properties 为 property ,可以使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed  <span class="string">'s/properties/property/g'</span>  build.xml</span><br></pre></td></tr></table></figure></p><p>这种方式，其实并没有修改build.xml文件的内容。如果想保存修改，通常的做法就需要重定向到另外的一个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed  <span class="string">'s/properties/property/g'</span>  build.xml &gt; build.xml.tmp</span><br><span class="line"><span class="comment"># 如果想直接修改源文件，而没有这样的过程，可以用下面的命令</span></span><br><span class="line">sed  -i <span class="string">'s/properties/property/g'</span>  build.xml</span><br></pre></td></tr></table></figure><h3 id="列出当前目录全部的目录"><a href="#列出当前目录全部的目录" class="headerlink" title="# 列出当前目录全部的目录"></a># 列出当前目录全部的目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 三种方式</span></span><br><span class="line">find . -<span class="built_in">type</span> d -maxdepth 1</span><br><span class="line">ls -F | grep <span class="string">'/$'</span></span><br><span class="line">ls -l | grep <span class="string">'^d'</span></span><br></pre></td></tr></table></figure><h3 id="列出当前目录下的所有文件（包括隐藏文件）的绝对路径，-对目录不做递归"><a href="#列出当前目录下的所有文件（包括隐藏文件）的绝对路径，-对目录不做递归" class="headerlink" title="# 列出当前目录下的所有文件（包括隐藏文件）的绝对路径， 对目录不做递归"></a># 列出当前目录下的所有文件（包括隐藏文件）的绝对路径， 对目录不做递归</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls | sed <span class="string">"s:^:`pwd`/:"</span></span><br><span class="line">find <span class="variable">$PWD</span> -maxdepth 1 | xargs ls -ld</span><br></pre></td></tr></table></figure><h3 id="nl"><a href="#nl" class="headerlink" title="# nl"></a># nl</h3><p>显示文件的行数</p><h3 id="head"><a href="#head" class="headerlink" title="# head"></a># head</h3><p>显示前几行</p><h3 id="sort"><a href="#sort" class="headerlink" title="# sort"></a># sort</h3><p>按照顺序排序</p><h3 id="watch"><a href="#watch" class="headerlink" title="# watch"></a># watch</h3><p>每隔一秒高亮显示网络链接数的变化情况</p><p>watch -n 1 -d netstat -ant</p><p>每隔一秒高亮显示http链接数的变化情况</p><p>watch -n 1 -d ‘pstree|grep http’</p><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>查看文件并且显示行数<br>cat -n /etc/inetd.conf</p><h3 id="tee"><a href="#tee" class="headerlink" title="# tee"></a># tee</h3><p>把数据重定向到给定<strong>文件</strong>和<strong>屏幕上</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将 ls 的 stdin 重定向到文件,并且输出到屏幕上面</span><br><span class="line">ls | tee out.txt</span><br></pre></td></tr></table></figure><h3 id="wget"><a href="#wget" class="headerlink" title="# wget"></a># wget</h3><p><a href="http://man.linuxde.net/wget" target="_blank" rel="noopener">参考</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-a&lt;日志文件&gt;：在指定的日志文件中记录资料的执行过程；</span><br><span class="line">-c：继续执行上次终端的任务；</span><br><span class="line">-O filename 将文件保存为 filename</span><br><span class="line">-i&lt;文件&gt;：从指定文件获取要下载的URL地址；</span><br><span class="line">--limit-rate=300k 限速下载</span><br><span class="line">-c 断点续传</span><br><span class="line">--user-agent 伪装代理名称下载</span><br></pre></td></tr></table></figure><h3 id="find"><a href="#find" class="headerlink" title="# find"></a># find</h3><p><a href="http://www.cnblogs.com/peida/archive/2013/02/26/2932972.html" target="_blank" rel="noopener">参考</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">atime n  查找系统中最后N分钟访问的文件</span><br><span class="line">amin n  查找系统中最后n*24小时访问的文件</span><br><span class="line"># 查找今天的(24小时内)</span><br><span class="line">find . -atime -1</span><br><span class="line"># 查找今天之前的(24小时内)</span><br><span class="line">find . -atime +1</span><br><span class="line"># 搜索当前目录的以 .log 结尾,一天内,权限问 600 ,大小大于 1 b 的普通文件,并且按照普通方式输出</span><br><span class="line">find . -type f -name &apos;*.log&apos; -atime -1 -perm 600 -size +1c -print</span><br></pre></td></tr></table></figure></p><h3 id="xargs"><a href="#xargs" class="headerlink" title="# xargs"></a># xargs</h3><p>xargs 命令是一个其他命令参数传递一个过滤器,擅长将stdin转化成命令参数,xargs 能够处理管道或者 stdin 并将其转化成特定命令的命令参数.</p><p>xargs 的默认命令是echo ,空格是默认定界符.<br>这也就意味着通过管道传递给xargs包含<strong>换行</strong>和<strong>空白</strong>,不过通过xargs的处理,换行和空白将被空格取代</p><p>cat abc | xargs echo &lt;=====&gt; cat abc | xargs</p><p>测试文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ cat abc | xargs      </span><br><span class="line">a b c d e f g h i j k l m n o p q r s t u v w x y z</span><br><span class="line">➜  ~ cat abc | xargs -n3</span><br><span class="line">a b c</span><br><span class="line">d e f</span><br><span class="line">g h i</span><br><span class="line">j k l</span><br><span class="line">m n o</span><br><span class="line">p q r</span><br><span class="line">s t u</span><br><span class="line">v w x</span><br><span class="line">y z</span><br><span class="line">➜  ~ echo &quot;nameXnameXnameXname&quot; | xargs -dX</span><br><span class="line">name name name name</span><br></pre></td></tr></table></figure></p><p>读取 stdin,将格式化后的参数传递给命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ cat sk.sh                 </span><br><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">echo $*</span><br></pre></td></tr></table></figure><p>测试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ cat arg                         </span><br><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line">ccc</span><br><span class="line">➜  ~ cat arg | xargs -I &#123;&#125; ./sk.sh &#123;&#125;</span><br><span class="line">aaa</span><br><span class="line">bbb</span><br><span class="line">ccc</span><br></pre></td></tr></table></figure></p><p>xargs 的一个<code>选项 -I</code> , 使用 -I 指定一个<strong>替换字符串{}</strong>,这个字符串在xargs拓展时会被替换掉,每一个参数命令都会被执行一次：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ cat abc | xargs -I &#123;&#125; ./sk.sh &quot;==&gt;&quot; &#123;&#125; &quot;&lt;==&quot;</span><br><span class="line">==&gt; a b c d e f g &lt;==</span><br><span class="line">==&gt; h i j k l m n &lt;==</span><br><span class="line">==&gt; o p q &lt;==</span><br><span class="line">==&gt; r s t &lt;==</span><br><span class="line">==&gt; u v w x y z &lt;==</span><br></pre></td></tr></table></figure><p>xargs 结合 find 使用</p><p>用rm 删除太多的文件时候，可能得到一个错误信息：/bin/rm Argument list too long. 用xargs去避免这个问题</p><p>xargs -0 将\0作为定界符<br>统计一个源代码目录中所有php 文件的行数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">## 正常输出</span><br><span class="line">➜  Controllers git:(master) find . -type f -name &apos;*.php&apos; -print</span><br><span class="line">./Controller.php</span><br><span class="line">./FetchController.php</span><br><span class="line">./LoginController.php</span><br><span class="line">./SockController.php</span><br><span class="line">./TestController.php</span><br><span class="line">## 将 \n 替换为 NULL</span><br><span class="line"></span><br><span class="line">➜  Controllers git:(master) find . -type f -name &apos;*.php&apos; -print0</span><br><span class="line"></span><br><span class="line">./Controller.php./FetchController.php./LoginController.php./SockController.php./TestController.php</span><br><span class="line"></span><br><span class="line">## 将 find 中的数据的 \n 替换为 NULL,同时 xargs 将 NULL 作为定界符</span><br><span class="line">➜  Controllers git:(master) find . -type f -name &apos;*.php&apos; -print0 | xargs -0 wc -l</span><br><span class="line">      71 ./Controller.php</span><br><span class="line">      95 ./FetchController.php</span><br><span class="line">      54 ./LoginController.php</span><br><span class="line">     112 ./SockController.php</span><br><span class="line">      30 ./TestController.php</span><br><span class="line">     362 total</span><br></pre></td></tr></table></figure><p>查找所有 jpg 文件,并且压缩他们</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -name &apos;*.jpg&apos; -print | xargs tar -czvf images.tar.gz</span><br></pre></td></tr></table></figure><p>下载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat url-list.txt | xargs wget -c</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;sed&quot;&gt;&lt;a href=&quot;#sed&quot; class=&quot;headerlink&quot; title=&quot;# sed&quot;&gt;&lt;/a&gt;# sed&lt;/h3&gt;&lt;p&gt;比如，我想替换文件中的 properties 为 property ,可以使用&lt;br&gt;&lt;figure class=&quot;high
      
    
    </summary>
    
      <category term="LINUX" scheme="https://www.whatdy.com/categories/LINUX/"/>
    
    
      <category term="LINUX" scheme="https://www.whatdy.com/tags/LINUX/"/>
    
  </entry>
  
  <entry>
    <title>docker CMD 和 ENTRYPOINT</title>
    <link href="https://www.whatdy.com/2018/03/31/docker-CMD-%E5%92%8C-ENTRYPOINT/"/>
    <id>https://www.whatdy.com/2018/03/31/docker-CMD-和-ENTRYPOINT/</id>
    <published>2018-03-31T06:27:04.000Z</published>
    <updated>2018-03-31T06:28:23.273Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p>支持三种形式:</p><ul><li>CMD [“executable”,”param1”,”param2”] 使用 exec 执行，推荐方式；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM python:3.6.3</span><br><span class="line">CMD [<span class="string">"python"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker run --rm -it test  不要带执行命令</span></span><br><span class="line">➜  <span class="built_in">test</span> docker run --rm -it <span class="built_in">test</span>                </span><br><span class="line">Python 3.6.3 (default, Dec 12 2017, 16:40:53) </span><br><span class="line">[GCC 4.9.2] on linux</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li></ul><p>相当于<code>/bin/sh -c python</code></p><ul><li>CMD command param1 param2 在 /bin/sh 中执行，提供给需要交互的应用；</li><li>CMD [“param1”,”param2”] 提供给 ENTRYPOINT 的默认参数；</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FROM python:3.6.3</span><br><span class="line">CMD <span class="string">"python"</span></span><br><span class="line"><span class="comment"># CMD 部分展现</span></span><br><span class="line"><span class="string">"Cmd"</span>: [</span><br><span class="line">    <span class="string">"/bin/sh"</span>,</span><br><span class="line">    <span class="string">"-c"</span>,</span><br><span class="line">    <span class="string">"\"python\""</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM python:3.6.3</span><br><span class="line"></span><br><span class="line">CMD /usr/<span class="built_in">local</span>/bin/python</span><br><span class="line"><span class="comment"># CMD 部分展现</span></span><br><span class="line"><span class="string">"Cmd"</span>: [</span><br><span class="line">    <span class="string">"/bin/sh"</span>,</span><br><span class="line">    <span class="string">"-c"</span>,</span><br><span class="line">    <span class="string">"/usr/local/bin/python"</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM python:3.6.3</span><br><span class="line">CMD [<span class="string">"python"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># CMD 部分展现</span></span><br><span class="line"><span class="string">"Cmd"</span>: [</span><br><span class="line">    <span class="string">"python"</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>总结如下:</p><p>CMD shell 形式并且为参数的时候,会传递给 sh,形式为 <code>/bin/sh -c &quot;xxx&quot;</code><br>CMD shell 形式并且是可执行参数的时候,会传递给 sh,形式为 <code>/bin/sh -c xxx</code></p><p>CMD 以可执行命令的方式传入,则会替换 sh,将传入的命令作为基础命令 ,<strong>但是会被 run 传入的参数覆盖</strong></p><p>例如上面的 <code>python</code>,如果运行 <code>docker run --rm -it test --help</code>,我们的本意是查看python的帮助信息,但是会报错,命令被覆盖为了<code>--help</code>,这个命令是不存在,所以我们可以这样运行<code>docker run --rm -it test python --help</code></p><p>这里还需要注意,由于没有 <code>entrypoint</code>,也就是没有 <code>/bin/sh -c</code>的加持,如果传入字符串会报错,也就是<code>docker run --rm -it test &quot;python --help&quot;</code>,除非设置了一下操作<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FROM python:3.6.3</span><br><span class="line">Entrypoint [<span class="string">"/bin/sh"</span>,<span class="string">"-c"</span>]</span><br><span class="line"><span class="comment"># 1. docker run --rm -it test "python --help"</span></span><br><span class="line"><span class="comment"># 相当于: /bin/sh -c "python --help"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. docker run --rm -it test python --help</span></span><br><span class="line"><span class="comment"># 相当于: /bin/sh -c python </span></span><br><span class="line">Python 2.7.12 (default, Dec  4 2017, 14:50:18) </span><br><span class="line">[GCC 5.4.0 20160609] on linux2</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>指定启动容器时执行的命令，每个 Dockerfile 只能有一条 CMD 命令。如果指定了多条命令，只有最后一条会被执行。</p><p><strong><em>如果用户启动容器时候指定了运行的命令，则会覆盖掉 CMD 指定的命令。</em></strong></p><h3 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h3><p>两种格式：</p><ul><li><p>ENTRYPOINT [“executable”, “param1”, “param2”]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM python3.6.3</span><br><span class="line">ENTRYPOINT [<span class="string">"/usr/local/bin/python"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker inspect &lt;name&gt; 查看明细</span></span><br><span class="line"><span class="string">"Entrypoint"</span>: [</span><br><span class="line">    <span class="string">"/usr/local/bin/python"</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure></li><li><p>ENTRYPOINT command param1 param2（shell中执行）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM python3.6.3</span><br><span class="line">ENTRYPOINT <span class="string">"/usr/local/bin/python"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># docker inspect &lt;name&gt; 查看明细</span></span><br><span class="line"></span><br><span class="line"><span class="string">"Entrypoint"</span>: [</span><br><span class="line">    <span class="string">"/bin/sh"</span>,</span><br><span class="line">    <span class="string">"-c"</span>,</span><br><span class="line">    <span class="string">"\"/usr/local/bin/python\""</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure></li></ul><p><strong><em>配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖。</em></strong></p><p>每个 Dockerfile 中只能有一个 ENTRYPOINT，当指定多个时，只有最后一个起效。</p><p><strong>从上面的说明，我们可以看到有两个共同点：</strong></p><ul><li>都可以指定shell或exec函数调用的方式执行命令；</li><li>当存在多个CMD指令或ENTRYPOINT指令时，只有最后一个生效；</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;CMD&quot;&gt;&lt;a href=&quot;#CMD&quot; class=&quot;headerlink&quot; title=&quot;CMD&quot;&gt;&lt;/a&gt;CMD&lt;/h3&gt;&lt;p&gt;支持三种形式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CMD [“executable”,”param1”,”param2”] 使用 exec 
      
    
    </summary>
    
      <category term="笔记" scheme="https://www.whatdy.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="docker" scheme="https://www.whatdy.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>php 相关注意</title>
    <link href="https://www.whatdy.com/2018/03/26/php-%E7%9B%B8%E5%85%B3%E6%B3%A8%E6%84%8F/"/>
    <id>https://www.whatdy.com/2018/03/26/php-相关注意/</id>
    <published>2018-03-26T12:19:02.000Z</published>
    <updated>2018-03-26T12:21:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>$_SERVER 参数</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最后一层代理的 IP 地址</span></span><br><span class="line">[REMOTE_ADDR] =&gt; <span class="number">10.42</span><span class="number">.149</span><span class="number">.196</span></span><br><span class="line"><span class="comment"># 访问者真实 IP</span></span><br><span class="line">[HTTP_X_FORWARDED_FOR] =&gt; <span class="number">101.81</span><span class="number">.14</span><span class="number">.6</span></span><br><span class="line"><span class="comment"># 服务器地址</span></span><br><span class="line">[SERVER_ADDR] =&gt; <span class="number">10.42</span><span class="number">.93</span><span class="number">.182</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;$_SERVER 参数&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cla
      
    
    </summary>
    
      <category term="笔记" scheme="https://www.whatdy.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="php" scheme="https://www.whatdy.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 热部署</title>
    <link href="https://www.whatdy.com/2018/03/25/SpringBoot-%E7%83%AD%E9%83%A8%E7%BD%B2/"/>
    <id>https://www.whatdy.com/2018/03/25/SpringBoot-热部署/</id>
    <published>2018-03-25T10:35:26.000Z</published>
    <updated>2018-03-25T10:35:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>SpringBoot 热部署</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后设置idea</p><ol><li><p>Build Execution &gt; Compiler &gt; Build Project automatically 打上勾</p></li><li><p>Register 设置 :  Ctrl + Option + Command 点击 Register ,找到 <code>compiler.automake.allow.when.app.running</code></p></li><li><p>重启 IDEA</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SpringBoot 热部署&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/
      
    
    </summary>
    
      <category term="笔记" scheme="https://www.whatdy.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="https://www.whatdy.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis 一些问题</title>
    <link href="https://www.whatdy.com/2018/03/25/MyBatis-%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>https://www.whatdy.com/2018/03/25/MyBatis-一些问题/</id>
    <published>2018-03-25T03:50:22.000Z</published>
    <updated>2018-03-25T10:04:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>#{}</strong><br>防止SQL注入,动态解析的时候,会解析成参数标记符,类似于:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">name</span> = #&#123;<span class="keyword">name</span>&#125;;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span> =?;</span><br></pre></td></tr></table></figure></p><p><strong>${}</strong><br>在解析的时候会将我们传入的值当做 String 填充到我们的语句中<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">"admin"</span>;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span> = $&#123;<span class="keyword">name</span>&#125;;</span><br></pre></td></tr></table></figure></p><p>这是 <code>#{}</code> 和 <code>${}</code> 我们能看到的主要的区别，除此之外，还有以下区别:</p><p>#方式能够很大程度防止sql注入。<br>$方式无法防止Sql注入。<br>$方式一般用于传入数据库对象，例如传入表名.<br>一般能用#的就别用$.</p><p>mybatis 还需要注意:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 使用 @Param 注解时,参数不仅有 JavaBean,而且还存在 queryObject 这个对象</span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"SELECT * from City where id = #&#123;id&#125;"</span>)</span><br><span class="line"><span class="function">List&lt;City&gt; <span class="title">getListByCriteria</span><span class="params">(@Param(<span class="string">"queryObject"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">## 不使用 @Param 注解时,参数只能有一个(JavaBean)</span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"SELECT * from City where id = $&#123;id&#125;"</span>)</span><br><span class="line"><span class="function">List&lt;City&gt; <span class="title">getListByCriteria</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="selectKey"><a href="#selectKey" class="headerlink" title="# selectKey"></a># selectKey</h3><p>使用Oracle的序列、mysql的函数生成ID 方式不一样,这里他们可以通过 <code>selectKey</code> 这个标签获取到插入数据生成的 ID</p><p>下面例子，使用mysql数据库 LAST_INSERT_ID()  用来生成一个key，并把他设置到传入的实体类中的 id 属性上。所以在执行完此方法后，边可以通过这个实体类获取生成的key。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"com.whatdy.model.City"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">resultType</span>=<span class="string">"int"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span>&gt;</span></span><br><span class="line">    SELECT LAST_INSERT_ID() AS id</span><br><span class="line"><span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">insert into city (</span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">    id,</span><br><span class="line">    name,</span><br><span class="line">    state,</span><br><span class="line">    country,</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">)</span><br><span class="line">values (</span><br><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">    #&#123;id,jdbcType=INTEGER&#125;,</span><br><span class="line">    #&#123;name,jdbcType=VARCHAR&#125;,</span><br><span class="line">    #&#123;state,jdbcType=VARCHAR&#125;,</span><br><span class="line">    #&#123;country,jdbcType=VARCHAR&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CityService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        City city = <span class="keyword">new</span> City();</span><br><span class="line">        city.setName(<span class="string">"北京"</span>);</span><br><span class="line">        city.setState(<span class="string">"100001"</span>);</span><br><span class="line">        city.setCountry(<span class="string">"中国"</span>);</span><br><span class="line">        <span class="keyword">int</span> i = cityMapper.insert(city);</span><br><span class="line">        LOGGER.info(<span class="string">"insert sql result ======&gt; "</span>);</span><br><span class="line">        System.out.println(city.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>描述</th><th>取值</th></tr></thead><tbody><tr><td>keyProperty    selectKey</td><td>语句生成结果需要设置的属性。    </td></tr><tr><td>resultType</td><td>生成结果类型，MyBatis 允许使用基本的数据类型，包括String 、int类型。    </td></tr><tr><td>order</td><td>1：BEFORE，会先选择主键，然后设置keyProperty，再执行insert语句； 2：AFTER，就先运行insert 语句再运行selectKey 语句。</td><td>BEFORE AFTER</td></tr><tr><td>statementType</td><td>MyBatis 支持STATEMENT，PREPARED和CALLABLE 的语句形式， 对应Statement ，PreparedStatement 和CallableStatement 响应</td><td>STATEMENT ,PREPARED,CALLABLE</td></tr></tbody></table><p>其他方式获取<code>插入操作返回的主键</code></p><p><strong>1. 使用useGeneratedKeys+keyProperty (推荐)</strong></p><blockquote><p>将插入的ID赋值给设置的keyProperty对象属性字段里面，一般也就是对象的ID，比如插入User对象，设置赋值主键ID给id字段。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2. 使用selectKey </strong></p><p><strong>也就是上述方式</strong></p><h3 id="select"><a href="#select" class="headerlink" title="# select"></a># select</h3><p>在操作数据库当中往往查询比插入难度更加大,更加繁琐</p><p>Dao 层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CityMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteByPrimaryKey</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(City record)</span></span>;</span><br><span class="line">    <span class="function">City <span class="title">selectByPrimaryKey</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function">List&lt;City&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKey</span><span class="params">(City record)</span></span>;</span><br><span class="line">    <span class="function">List&lt;City&gt; <span class="title">getListByCriteria</span><span class="params">(@Param(<span class="string">"queryObject"</span>)</span> City record)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Mapper<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getListByCriteria"</span> <span class="attr">parameterType</span>=<span class="string">"com.whatdy.model.City"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">    select * from city</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"select_where_clause"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"select_where_clause"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefixOverrides</span>=<span class="string">"AND|OR"</span> <span class="attr">prefix</span>=<span class="string">"where"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"queryObject.id != null"</span>&gt;</span>AND id = #&#123;queryObject.id&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"queryObject.name != null"</span>&gt;</span>AND id = #&#123;queryObject.name&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"queryObject.state != null"</span>&gt;</span>AND id = #&#123;queryObject.state&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"queryObject.country != null"</span>&gt;</span>AND id = #&#123;queryObject.country&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="association-collection"><a href="#association-collection" class="headerlink" title="# association , collection"></a># association , collection</h3><ol><li>关联-association</li><li>集合-collection</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Card card_one;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Card&gt; card_many;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在映射 <code>card_one</code> 属性时候用 <code>association</code> 标签,映射 <code>card_many</code> 的时候使用 <code>collection</code></p><p>association 用于<code>一对一</code> 和 <code>多对一</code>,collection 用于 <code>一对多关系</code></p><p>例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Products&gt; productsList;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date createdAt;</span><br><span class="line">    <span class="keyword">private</span> Date updatedAt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Products</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String pname;</span><br><span class="line">    <span class="keyword">private</span> Float price;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Date createdAt;</span><br><span class="line">    <span class="keyword">private</span> Date updatedAt;</span><br><span class="line">    <span class="keyword">private</span> Users users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>UsersMapper.xml</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseProductResultMap"</span> <span class="attr">type</span>=<span class="string">"com.whatdy.model.Products"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pname"</span> <span class="attr">property</span>=<span class="string">"pname"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"price"</span> <span class="attr">property</span>=<span class="string">"price"</span> <span class="attr">jdbcType</span>=<span class="string">"REAL"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"uid"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"created_at"</span> <span class="attr">property</span>=<span class="string">"createdAt"</span> <span class="attr">jdbcType</span>=<span class="string">"DATE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"updated_at"</span> <span class="attr">property</span>=<span class="string">"updatedAt"</span> <span class="attr">jdbcType</span>=<span class="string">"DATE"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 表关联--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"detailUserResultMap"</span> <span class="attr">type</span>=<span class="string">"com.whatdy.model.Users"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"created_at"</span> <span class="attr">property</span>=<span class="string">"createdAt"</span> <span class="attr">jdbcType</span>=<span class="string">"DATE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"updated_at"</span> <span class="attr">property</span>=<span class="string">"updatedAt"</span> <span class="attr">jdbcType</span>=<span class="string">"DATE"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- property: 指的是集合属性的值, ofType：指的是集合中元素的类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"productsList"</span> <span class="attr">ofType</span>=<span class="string">"com.whatdy.model.Products"</span>  <span class="attr">javaType</span>=<span class="string">"ArrayList"</span> <span class="attr">resultMap</span>=<span class="string">"BaseProductResultMap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserDetails"</span> <span class="attr">resultMap</span>=<span class="string">"detailUserResultMap"</span>&gt;</span></span><br><span class="line">    SELECT * FROM users B left  JOIN products A on B.id = A.uid</span><br><span class="line">    WHERE B.id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>ProductMapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.whatdy.model.Users"</span> <span class="attr">id</span>=<span class="string">"userResult"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"created_at"</span> <span class="attr">property</span>=<span class="string">"createdAt"</span> <span class="attr">jdbcType</span>=<span class="string">"DATE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"updated_at"</span> <span class="attr">property</span>=<span class="string">"updatedAt"</span> <span class="attr">jdbcType</span>=<span class="string">"DATE"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"userAndProductResultMap"</span> <span class="attr">type</span>=<span class="string">"com.whatdy.model.Products"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pname"</span> <span class="attr">property</span>=<span class="string">"pname"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"price"</span> <span class="attr">property</span>=<span class="string">"price"</span> <span class="attr">jdbcType</span>=<span class="string">"REAL"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">property</span>=<span class="string">"uid"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"created_at"</span> <span class="attr">property</span>=<span class="string">"createdAt"</span> <span class="attr">jdbcType</span>=<span class="string">"DATE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"updated_at"</span> <span class="attr">property</span>=<span class="string">"updatedAt"</span> <span class="attr">jdbcType</span>=<span class="string">"DATE"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用 resultMap 属性引用上面的 User 实体映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"users"</span> <span class="attr">column</span>=<span class="string">"uid"</span> <span class="attr">javaType</span>=<span class="string">"com.whatdy.model.Users"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">resultMap</span>=<span class="string">"userResult"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--关联 一对一--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserAndProduct"</span> <span class="attr">resultMap</span>=<span class="string">"userAndProductResultMap"</span>&gt;</span></span><br><span class="line">   select * from products A LEFT JOIN users B ON A.uid = B.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Dao 层</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductsMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Products&gt;  <span class="title">selectUserAndProduct</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Users&gt; <span class="title">selectUserDetails</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>测试</strong></p><p><strong>TestUserService</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = (Logger) LoggerFactory.getLogger(UserService.class);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> UsersMapper usersMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAssociationTable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Users&gt; usersList = usersMapper.selectUserDetails(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (Users u :</span><br><span class="line">                usersList) &#123;</span><br><span class="line">            System.out.println(u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>TestProductService</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = (Logger) LoggerFactory.getLogger(ProductService.class);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> ProductsMapper productsMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAssociationTable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Products&gt; list = productsMapper.selectUserAndProduct();</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;#{}&lt;/strong&gt;&lt;br&gt;防止SQL注入,动态解析的时候,会解析成参数标记符,类似于:&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;l
      
    
    </summary>
    
      <category term="笔记" scheme="https://www.whatdy.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="https://www.whatdy.com/tags/java/"/>
    
      <category term="mybatis" scheme="https://www.whatdy.com/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>JAVA 日志</title>
    <link href="https://www.whatdy.com/2018/03/25/JAVA-%E6%97%A5%E5%BF%97/"/>
    <id>https://www.whatdy.com/2018/03/25/JAVA-日志/</id>
    <published>2018-03-25T03:23:45.000Z</published>
    <updated>2018-03-25T03:26:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>static Level WARN</strong><br>WARN level表明会出现潜在错误的情形。<br><strong>static Level ERROR</strong><br>ERROR level指出虽然发生错误事件，但仍然不影响系统的继续运行。<br><strong>static Level FATAL</strong><br>FATAL level指出每个严重的错误事件将会导致应用程序的退出。<br>另外，还有两个可用的特别的日志记录级别: (以下描述来自log4j API<a href="http://jakarta.apache.org/log4j/docs/api/index.html)" target="_blank" rel="noopener">http://jakarta.apache.org/log4j/docs/api/index.html)</a>:<br><strong>static Level ALL</strong><br>ALL Level是最低等级的，用于打开所有日志记录。<br><strong>static Level OFF</strong></p><p>OFF Level是最高等级的，用于关闭所有日志记录。<br>日志记录器（Logger）的行为是分等级的。如下表所示：<br>分为<code>OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL</code>或者您定义的级别。<br>Log4j建议只使用四个级别，优先级从高到低分别是 <code>ERROR、WARN、INFO、DEBUG</code>。<br>通过在这里定义的级别，您可以控制到应用程序中相应级别的日志信息的开关。比如在这里定义了INFO级别，则应用程序中所有DEBUG级别的日志信息将不被打印出来，也是说大于等于的级别的日志才输出。<br>日志记录的级别有继承性，子类会记录父类的所有的日志级别。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;static Level WARN&lt;/strong&gt;&lt;br&gt;WARN level表明会出现潜在错误的情形。&lt;br&gt;&lt;strong&gt;static Level ERROR&lt;/strong&gt;&lt;br&gt;ERROR level指出虽然发生错误事件，但仍然不影响系统的继续
      
    
    </summary>
    
      <category term="笔记" scheme="https://www.whatdy.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="https://www.whatdy.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>使用阿里云ECS搭建Shadowscoks和VPN翻墙</title>
    <link href="https://www.whatdy.com/2018/03/24/%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91ECS%E6%90%AD%E5%BB%BAShadowscoks%E5%92%8CVPN%E7%BF%BB%E5%A2%99/"/>
    <id>https://www.whatdy.com/2018/03/24/使用阿里云ECS搭建Shadowscoks和VPN翻墙/</id>
    <published>2018-03-24T15:33:37.000Z</published>
    <updated>2018-03-25T03:24:44.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ShadowsocksX: <a href="https://github.com/shadowsocks/ShadowsocksX-NG/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/ShadowsocksX-NG/releases</a></p></blockquote><h2 id="1-为什么翻墙"><a href="#1-为什么翻墙" class="headerlink" title="1 为什么翻墙"></a>1 为什么翻墙</h2><p>作为一个技术人员, 最常用的就是Google、StackOverflow、Github这些网站, 工作期间几乎每分钟都在用。</p><p>另外,偶尔也上上Facebook、YouTube、草榴以及Porn, 娱乐一下自己。</p><p>如果不能翻墙, 几乎就是鱼离开了水, 人离开了空气, 感觉一刻都不能待下去。</p><h2 id="2-常用的翻墙方法"><a href="#2-常用的翻墙方法" class="headerlink" title="2 常用的翻墙方法"></a>2 常用的翻墙方法</h2><p>常用的翻墙方法是:</p><p>1 购买一台大陆以外的服务器,搭建VPN或者ShadowScoks。</p><p>2 购买第三方的代理服务。 (我试用过后,觉得速度不可控,而且限制多。 况且我们公司人多, 算下来不如自己搭建划算)</p><p>3 使用自由门、GoAgent(速度比较慢、经常不能用、mac或者手机上用不了)</p><p>我用的电脑是Mac, 电脑支持VPN、ShadowSocks, 手机是iPhone, 没有越狱,不支持ShadowSocks(更正: 现在在App Store 下载 Wingy 软件,已经支持ShadowSocks)。</p><p>电脑版的ShadowSocks客户端支持自动代理模式,国内的不走代理,国外的走代理,而且能自定义。</p><p>而VPN只能完全代理。 所以我决定Shadowscoks和VPN都搭建。 电脑上主要用Shadowsocks,手机上用VPN(更正:手机上可以用 Wingy 了)。</p><p>那么,如何选择一家合适的代理服务器呢?</p><p>国外比较知名的云服务运营商有有Linode、DigitalOcean等, 费用基本10美元一个月。ping值在200左右。</p><p>国内阿里云也有香港和美国节点,香港节点价格117元/月, ping值在50左右。</p><p>之前2年用的是linode, 一直比较稳定,但是最近, 速度实在太慢了, 决定迁回阿里云香港试一下。 在这里做个记录。</p><p>(更正: 2017年之前阿里云香港的服务器是可以用的, 现在(2017年底)已经搭建的 Shadowsocks Server 貌似不受影响, 但新搭建的貌似已经不能访问了, 所以建议使用 阿里云新加坡 的机房搭建)</p><h2 id="3-实施"><a href="#3-实施" class="headerlink" title="3 实施"></a>3 实施</h2><h3 id="3-1-购买服务器"><a href="#3-1-购买服务器" class="headerlink" title="3.1 购买服务器"></a>3.1 购买服务器</h3><p>在阿里云后台,购买 1核CPU 1GB内存 的服务器, 操作系统选择的是 CentOS 7.0 64位, 价格117元/月。</p><h3 id="3-2-使用Shdowsocks翻墙"><a href="#3-2-使用Shdowsocks翻墙" class="headerlink" title="3.2 使用Shdowsocks翻墙"></a>3.2 使用Shdowsocks翻墙</h3><h4 id="1-安装Shdowsocks服务端"><a href="#1-安装Shdowsocks服务端" class="headerlink" title="1) 安装Shdowsocks服务端"></a>1) 安装Shdowsocks服务端</h4><p>登录阿里云服务器, 执行以下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装pip</span></span><br><span class="line">yum install python-pip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用pip安装shadowsocks</span></span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure></p><h3 id="2-配置Shdowsocks服务-并启动"><a href="#2-配置Shdowsocks服务-并启动" class="headerlink" title="2) 配置Shdowsocks服务,并启动"></a>2) 配置Shdowsocks服务,并启动</h3><p>新建 /etc/shadowsocks.json 文件, 并写入以下内容<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"server"</span>:<span class="string">"remote-shadowsocks-server-ip-addr"</span>,</span><br><span class="line"><span class="attr">"server_port"</span>:<span class="number">443</span>,</span><br><span class="line"><span class="attr">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line"><span class="attr">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line"><span class="attr">"password"</span>:<span class="string">"your-passwd"</span>,</span><br><span class="line"><span class="attr">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line"><span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line"><span class="attr">"fast_open"</span>:<span class="literal">false</span>,</span><br><span class="line"><span class="attr">"workers"</span>:<span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意修改 <code>server</code> 和 <code>password</code>, <code>workers</code> 表示启动的进程数量。</p><p><code>server_port</code> 强烈建议使用443端口, 其它端口容易被查封。</p><p>然后使用以下命令启动: <code>ssserver -c /etc/shadowsocks.json -d start</code></p><p>如果出现报错: <code>Cannot assign requested address</code>, 请将 <code>server</code> 换成 <code>0.0.0.0</code>, 然后重新启动上面的命令。</p><h3 id="3-使用本机Shdowsocks客户端-连接服务端上网"><a href="#3-使用本机Shdowsocks客户端-连接服务端上网" class="headerlink" title="3) 使用本机Shdowsocks客户端, 连接服务端上网"></a>3) 使用本机Shdowsocks客户端, 连接服务端上网</h3><p>如果用的是mac, 上网站 <a href="https://sourceforge.net/projects/shadowsocksgui/" target="_blank" rel="noopener">https://sourceforge.net/projects/shadowsocksgui/</a> 下载客户端。</p><p>安装完后进行如下配置:</p><p><img src="http://oj74t8laa.bkt.clouddn.com/markdown/vpn/shadowsocks.jpg" alt="image"></p><p>如果是windows, 上面的网站也有客户端下载链接。</p><p>如果是android, 参考网站 <a href="https://github.com/shadowsocks/shadowsocks-android" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-android</a></p><p>如果是iPhone, 那你用不了shadowsocks, 只能用下面的VPN了。(更正,现在可以用 Wingy 了)</p><p>3.3 使用VPN翻墙<br>VPN 隧道协议PPTP、L2TP、IPSec和SSLVPN（SSTP，OpenVPN）中安全性逐级提高，相应的受到墙的干扰逐级减弱。 考虑到跨平台，PPTP穿透力及安全性，这里搭建支持 ikev1/ikev2 的 Ipsec VPN，适用于iOS、Android、Windows 7+ 、MacOS X,及Linux。 为了兼容Windows 7以下的系统，同时搭建L2TP/IPSec支持。</p><p>TODO: 待完善</p><h2 id="python-docker-方式搭建"><a href="#python-docker-方式搭建" class="headerlink" title="python + docker 方式搭建"></a>python + docker 方式搭建</h2><p>Ubuntu:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -</span><br><span class="line">apt install docker.io</span><br><span class="line"><span class="comment"># 映射1984 到宿主机443 端口</span></span><br><span class="line">docker run -d -p 443:1984 oddrationale/docker-shadowsocks -s 0.0.0.0 -p 1984 -k &lt;密码&gt; -m aes-256-cfb</span><br></pre></td></tr></table></figure></p><p>我们就可以利用 Shadowsocks  iOS/OX/windows/android 等版本进行登录了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">账号: xx.xx.xx.xx</span><br><span class="line">端口: 442</span><br><span class="line">加密方式: aes-256-cfb</span><br><span class="line">密码: &lt;密码&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;ShadowsocksX: &lt;a href=&quot;https://github.com/shadowsocks/ShadowsocksX-NG/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://githu
      
    
    </summary>
    
      <category term="Linux" scheme="https://www.whatdy.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://www.whatdy.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>openvpn 服务器搭建</title>
    <link href="https://www.whatdy.com/2018/03/24/openvpn-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    <id>https://www.whatdy.com/2018/03/24/openvpn-服务器搭建/</id>
    <published>2018-03-24T15:31:09.000Z</published>
    <updated>2018-03-24T15:32:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>服务器配置 centos7</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## docker自行安装奥</span></span><br><span class="line">yum install docker</span><br><span class="line">docker pull kylemanna/openvpn</span><br><span class="line"></span><br><span class="line">OVPN_DATA=<span class="string">"/data/ovpn-data"</span></span><br><span class="line">// 下面的全局变量替换为你的服务器的外网IP</span><br><span class="line">IP=<span class="string">"xxx.xxx.xxx.xxx"</span></span><br><span class="line">mkdir -p <span class="variable">$&#123;OVPN_DATA&#125;</span></span><br><span class="line"></span><br><span class="line">// 第二步</span><br><span class="line">docker run -v <span class="variable">$&#123;OVPN_DATA&#125;</span>:/etc/openvpn --rm kylemanna/openvpn ovpn_genconfig -u tcp://<span class="variable">$&#123;IP&#125;</span></span><br><span class="line"></span><br><span class="line">// 第三步</span><br><span class="line">docker run -v <span class="variable">$&#123;OVPN_DATA&#125;</span>:/etc/openvpn --rm -it kylemanna/openvpn ovpn_initpki</span><br><span class="line"></span><br><span class="line">// ---------------------------------------------------------</span><br><span class="line">Enter PEM pass phrase: 输入123456（你是看不见的）</span><br><span class="line">Verifying - Enter PEM pass phrase: 输入123456（你是看不见的）</span><br><span class="line">Common Name (eg: your user, host, or server name) [Easy-RSA CA]:回车一下</span><br><span class="line">Enter pass phrase <span class="keyword">for</span> /etc/openvpn/pki/private/ca.key:输入123456</span><br><span class="line">// ---------------------------------------------------------</span><br><span class="line"></span><br><span class="line">// 第五步</span><br><span class="line">docker run -v <span class="variable">$&#123;OVPN_DATA&#125;</span>:/etc/openvpn --rm -it kylemanna/openvpn easyrsa build-client-full CLIENTNAME nopass</span><br><span class="line"></span><br><span class="line">// ---------------------------------------------------------</span><br><span class="line">Enter pass phrase <span class="keyword">for</span> /etc/openvpn/pki/private/ca.key:输入123456</span><br><span class="line">// ---------------------------------------------------------</span><br><span class="line"></span><br><span class="line">// 第六步</span><br><span class="line">docker run -v <span class="variable">$&#123;OVPN_DATA&#125;</span>:/etc/openvpn --rm kylemanna/openvpn ovpn_getclient CLIENTNAME &gt; <span class="variable">$&#123;OVPN_DATA&#125;</span>/CLIENTNAME.ovpn</span><br><span class="line"></span><br><span class="line">// 第七步</span><br><span class="line">docker run --name openvpn -v <span class="variable">$&#123;OVPN_DATA&#125;</span>:/etc/openvpn -d -p 1194:1194 --privileged kylemanna/openvpn</span><br></pre></td></tr></table></figure><p>经过以上七个步骤，你将会在/data/ovpn-data中看到一个CLIENTNAME.ovpn文件，将其下载到本地，利用OpenVPN GUI连接，即可。</p><p>经过整理后即：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## docker自行安装奥</span></span><br><span class="line">yum install docker</span><br><span class="line">docker pull kylemanna/openvpn</span><br><span class="line">OVPN_DATA=<span class="string">"/data/ovpn-data"</span></span><br><span class="line">IP=<span class="string">"123.123.123.123"</span></span><br><span class="line">mkdir <span class="variable">$&#123;OVPN_DATA&#125;</span></span><br><span class="line">docker run -v <span class="variable">$&#123;OVPN_DATA&#125;</span>:/etc/openvpn --rm kylemanna/openvpn ovpn_genconfig -u tcp://<span class="variable">$&#123;IP&#125;</span></span><br><span class="line">docker run -v <span class="variable">$&#123;OVPN_DATA&#125;</span>:/etc/openvpn --rm -it kylemanna/openvpn ovpn_initpki</span><br><span class="line">docker run -v <span class="variable">$&#123;OVPN_DATA&#125;</span>:/etc/openvpn --rm -it kylemanna/openvpn easyrsa build-client-full CLIENTNAME nopass</span><br><span class="line">docker run -v <span class="variable">$&#123;OVPN_DATA&#125;</span>:/etc/openvpn --rm kylemanna/openvpn ovpn_getclient CLIENTNAME &gt; <span class="variable">$&#123;OVPN_DATA&#125;</span>/CLIENTNAME.ovpn</span><br><span class="line">docker run --name openvpn -v <span class="variable">$&#123;OVPN_DATA&#125;</span>:/etc/openvpn -d -p 1194:1194 --privileged kylemanna/openvpn</span><br></pre></td></tr></table></figure><h2 id="OPENVPN连接"><a href="#OPENVPN连接" class="headerlink" title="OPENVPN连接"></a>OPENVPN连接</h2><p>mac 版本下载<br><a href="https://tunnelblick.en.softonic.com/mac" target="_blank" rel="noopener">Tunnelblick</a></p><p>将 *.ovpn 添加到配置,连接即可</p><p><img src="http://oj74t8laa.bkt.clouddn.com/markdown/vpn/abc.png" alt="image"></p><p><img src="http://oj74t8laa.bkt.clouddn.com/WX20171202-004917@2x.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;服务器配置 centos7&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/
      
    
    </summary>
    
      <category term="Linux" scheme="https://www.whatdy.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://www.whatdy.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux curl &amp;&amp; http</title>
    <link href="https://www.whatdy.com/2018/03/24/Linux-curl-http/"/>
    <id>https://www.whatdy.com/2018/03/24/Linux-curl-http/</id>
    <published>2018-03-24T15:24:02.000Z</published>
    <updated>2018-03-25T14:33:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CURL-命令"><a href="#CURL-命令" class="headerlink" title="# CURL 命令"></a># CURL 命令</h3><p>常用参数列表: </p><p>-A/–user-agent <string>    设置用户代理发送给服务器<br>-b/–cookie &lt;name=string/file&gt;    cookie字符串或文件读取位置<br>–basic    使用HTTP基本验证<br>-c/–cookie-jar <file>    操作结束后把cookie写入到这个文件中<br>-d/–data <data>    HTTP POST方式传送数据<br>-D/–dump-header <file>    把header信息写入到该文件中<br>-e/–referer    来源网址<br>-G/–get    以get的方式来发送数据<br>-H/–header <line></line>    自定义头信息传递给服务器<br>-i/–include    输出时包括protocol头信息<br>-I/–head    只显示请求头信息<br>-s，可以去除统计信息</file></data></file></string></p><p>-o/–output    把输出写到该文件中<br>-u/–user &lt;user[:password]&gt;    设置服务器的用户和密码<br>-x/–proxy &lt;host[:port]&gt;    在给定的端口上使用HTTP代理<br>-X/–request <command>    指定什么命令</p><p>例子:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># post 带着请求头,post body并且显示protocol头信息</span></span><br><span class="line"><span class="comment">#  -H 'Content-Type:application/json' \</span></span><br><span class="line">curl -s -i -X POST \</span><br><span class="line">    -H  <span class="string">'Accept:application/json; text/plain, */*'</span> \</span><br><span class="line">    -H <span class="string">'User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 11_2_6 like Mac OS X) AppleWebKit/604.5.6 (KHTML, like Gecko) Mobile/15D100'</span> \</span><br><span class="line">    -H <span class="string">"Cookie:app_name=ShenDeng"</span> \</span><br><span class="line">    -H <span class="string">"X-Requested-With: XMLHttpRequest"</span> \</span><br><span class="line">    -H <span class="string">"Origin: http://localhost"</span>  \</span><br><span class="line">    -H <span class="string">"Host: http://localhost"</span>  \</span><br><span class="line">    http://localhost:8000 -d <span class="string">"app_id=1325997595&amp;idfa=53B9A1CA-72F1-46E2-89C2-969120929E95&amp;ip=127.0.0.1&amp;source=hcc"</span></span><br></pre></td></tr></table></figure></p><p>参考:  <a href="http://man.linuxde.net/curl" target="_blank" rel="noopener">http://man.linuxde.net/curl</a></p><h4 id="http-命令"><a href="#http-命令" class="headerlink" title="# http 命令"></a># http 命令</h4><blockquote><p>Http 命令默认显示头部信息,带有高亮,JSON数据自动格式化</p></blockquote><p>截取常用部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ http example.org               # =&gt; GET</span><br><span class="line">$ http example.org hello=world   # =&gt; POST</span><br><span class="line"></span><br><span class="line">$ http :3000                    # =&gt; http://localhost:3000</span><br><span class="line">$ http :/foo                    # =&gt; http://localhost/foo</span><br><span class="line"></span><br><span class="line">&apos;:&apos; HTTP headers:</span><br><span class="line">      Referer:http://httpie.org  Cookie:foo=bar  User-Agent:bacon/1.0</span><br><span class="line"></span><br><span class="line">&apos;==&apos; URL parameters to be appended to the request URI:</span><br><span class="line">      search==httpie</span><br><span class="line"></span><br><span class="line">&apos;=&apos; Data fields to be serialized into a JSON object (with --json, -j)</span><br><span class="line">          or form data (with --form, -f):</span><br><span class="line">      name=HTTPie  language=Python  description=&apos;CLI HTTP client&apos;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;CURL-命令&quot;&gt;&lt;a href=&quot;#CURL-命令&quot; class=&quot;headerlink&quot; title=&quot;# CURL 命令&quot;&gt;&lt;/a&gt;# CURL 命令&lt;/h3&gt;&lt;p&gt;常用参数列表: &lt;/p&gt;
&lt;p&gt;-A/–user-agent &lt;string&gt;    设置用
      
    
    </summary>
    
      <category term="笔记" scheme="https://www.whatdy.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="https://www.whatdy.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>spring boot 发送网络请求</title>
    <link href="https://www.whatdy.com/2018/03/24/spring-boot-%E5%8F%91%E9%80%81%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/"/>
    <id>https://www.whatdy.com/2018/03/24/spring-boot-发送网络请求/</id>
    <published>2018-03-24T11:08:22.000Z</published>
    <updated>2018-03-24T15:28:47.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Spring-boot-RestTemplate-GET-请求误区"><a href="#Spring-boot-RestTemplate-GET-请求误区" class="headerlink" title="# Spring boot RestTemplate GET 请求误区"></a># Spring boot RestTemplate GET 请求误区</h4><p>错误使用方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String url = <span class="string">"http://localhost:8080/test/sendSms"</span>;</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; uriVariables = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">uriVariables.put(<span class="string">"phone"</span>, <span class="string">"151xxxxxxxx"</span>);</span><br><span class="line">uriVariables.put(<span class="string">"msg"</span>, <span class="string">"测试短信内容"</span>);</span><br><span class="line"></span><br><span class="line">String result = restOperations.getForObject(url, String.class, uriVariables);</span><br></pre></td></tr></table></figure><p>正确使用方式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> String url = <span class="string">"http://localhost:8080/test/sendSms?phone=&#123;phone&#125;&amp;msg=&#123;msg&#125;"</span>;</span><br><span class="line"></span><br><span class="line">HashMap&lt;String, Object&gt; uriVariables = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">uriVariables.put(<span class="string">"phone"</span>,<span class="string">"153xxxxxxxx"</span>);</span><br><span class="line">uriVariables.put(<span class="string">"msg"</span>,<span class="string">"短息消息"</span>);</span><br><span class="line"></span><br><span class="line">String result = restOperations.getForObject(url,String.class,uriVariables);</span><br><span class="line"><span class="comment">// 等价于  String result = restOperations.getForObject(url, String.class,  "151xxxxxxxx", "测试短信内容");</span></span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure></p><h4 id="String-Boot-使用-RestTemplate-中文乱码问题"><a href="#String-Boot-使用-RestTemplate-中文乱码问题" class="headerlink" title="# String Boot 使用 RestTemplate 中文乱码问题"></a># String Boot 使用 RestTemplate 中文乱码问题</h4><p>由于 <code>StringHttpMessageConverter</code> 默认使用的是 <code>ISO-8859-1</code> 编码,所以这里我们采用下面的策略修改默认编码,有的同学通过修改源码,这里不推荐</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zw.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.StringHttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.LinkedMultiValueMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.MultiValueMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> youliangzhang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/3/24  下午6:11</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">client</span><span class="params">(String url, HttpMethod method, MultiValueMap&lt;String, String&gt; params)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取对话</span></span><br><span class="line">        RestTemplate client = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">        <span class="keyword">this</span>.reInitMessageConverter(client);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 请求头</span></span><br><span class="line">        HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">        <span class="comment">//  请勿轻易改变此提交方式，大部分的情况下，提交方式都是表单提交</span></span><br><span class="line">        MediaType type = MediaType.parseMediaType(<span class="string">"application/x-www-form-urlencoded; charset=UTF-8"</span>);</span><br><span class="line">        headers.setContentType(type);</span><br><span class="line">        headers.add(<span class="string">"Accept"</span>, MediaType.APPLICATION_JSON.toString());</span><br><span class="line">        <span class="comment">//我们发起 HTTP 请求还是最好加上"Connection","close" ，有利于程序的健壮性</span></span><br><span class="line">        headers.set(<span class="string">"Connection"</span>, <span class="string">"close"</span>);</span><br><span class="line"></span><br><span class="line">        HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt; requestEntity = <span class="keyword">new</span> HttpEntity&lt;&gt;(params, headers);</span><br><span class="line">        <span class="comment">//  执行HTTP请求</span></span><br><span class="line">        ResponseEntity&lt;String&gt; response = client.exchange(url, method, requestEntity, String.class);</span><br><span class="line">        <span class="keyword">return</span> response.getBody();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化RestTemplate，RestTemplate会默认添加HttpMessageConverter,添加的StringHttpMessageConverter非UTF-8</span></span><br><span class="line"><span class="comment">     * 所以先要移除原有的StringHttpMessageConverter，再添加一个字符集为UTF-8的StringHttpMessageConvert</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> restTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reInitMessageConverter</span><span class="params">(RestTemplate restTemplate)</span> </span>&#123;</span><br><span class="line">        List&lt;HttpMessageConverter&lt;?&gt;&gt; converterList = restTemplate.getMessageConverters();</span><br><span class="line">        HttpMessageConverter&lt;?&gt; converterTarget = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (HttpMessageConverter&lt;?&gt; item : converterList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.getClass() == StringHttpMessageConverter.class) &#123;</span><br><span class="line">                converterTarget = item;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (converterTarget != <span class="keyword">null</span>) &#123;</span><br><span class="line">            converterList.remove(converterTarget);</span><br><span class="line">        &#125;</span><br><span class="line">        HttpMessageConverter&lt;?&gt; converter = <span class="keyword">new</span> StringHttpMessageConverter(StandardCharsets.UTF_8);</span><br><span class="line">        converterList.add(converter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HttpClient client = <span class="keyword">new</span> HttpClient();</span><br><span class="line">        <span class="comment">//String url = "http://localhost:8000";</span></span><br><span class="line">        String url = <span class="string">"https://www.baidu.com"</span>;</span><br><span class="line">        HttpMethod method = HttpMethod.POST;</span><br><span class="line">        <span class="comment">// 封装参数,千万不要替换为Map与HashMap,否则无法传参</span></span><br><span class="line">        MultiValueMap&lt;String, String&gt; params = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">        params.add(<span class="string">"access_token"</span>, <span class="string">"xxxx"</span>);</span><br><span class="line">        String content = client.client(url, method, params);</span><br><span class="line">        System.out.println(content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exchange 参数列表情况:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">restTemplate.exchange(</span><br><span class="line">    String url, </span><br><span class="line">    HttpMethod method,</span><br><span class="line">    HttpEntity requestEntity, </span><br><span class="line">    Class responseType, </span><br><span class="line">    Object uriVariables[]</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>说明：<br>1）url: 请求地址；<br>2）method: 请求类型(如：POST,PUT,DELETE,GET)；<br>3）requestEntity: 请求实体，封装请求头，请求内容<br>4）responseType: 响应类型，根据服务接口的返回类型决定<br>5）uriVariables: url中参数变量值</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Spring-boot-RestTemplate-GET-请求误区&quot;&gt;&lt;a href=&quot;#Spring-boot-RestTemplate-GET-请求误区&quot; class=&quot;headerlink&quot; title=&quot;# Spring boot RestTemplate
      
    
    </summary>
    
      <category term="笔记" scheme="https://www.whatdy.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="https://www.whatdy.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>spring 注解</title>
    <link href="https://www.whatdy.com/2018/03/24/spring-%E6%B3%A8%E8%A7%A3/"/>
    <id>https://www.whatdy.com/2018/03/24/spring-注解/</id>
    <published>2018-03-23T17:20:21.000Z</published>
    <updated>2018-03-23T17:23:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud-注解"><a href="#SpringCloud-注解" class="headerlink" title="SpringCloud 注解"></a>SpringCloud 注解</h1><h3 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="# @SpringBootApplication"></a># @SpringBootApplication</h3><p>等价于<code>@Configuration</code>、<code>@EnableAutoConfiguration</code>、<code>@ComponentScan</code>,</p><p>查看<code>SpringBootApplication</code>注解可以发现 <code>@ComponentScan</code> 并没有添加任何的参数，它会自动扫描工程里所有的<code>@Component, @Service, @Repository, @Controller</code>并把它们注册为Spring Beans。</p><h3 id="AutoWired"><a href="#AutoWired" class="headerlink" title="# @AutoWired"></a># @AutoWired</h3><p>自动装载</p><h3 id="Component"><a href="#Component" class="headerlink" title="# @Component"></a># @Component</h3><p>泛指组件，一般用于普通POJO,当组件不好归类的时候，也可以使用这个注解进行标注。</p><h3 id="Service"><a href="#Service" class="headerlink" title="# @Service"></a># @Service</h3><p>用于标注业务层组件</p><h3 id="RestController"><a href="#RestController" class="headerlink" title="# @RestController"></a># @RestController</h3><p>用于标注控制层组件。<code>@RestController</code>同时包含了<code>@Controller、@ResponseBod</code>y。</p><h3 id="GetMapping"><a href="#GetMapping" class="headerlink" title="# @GetMapping"></a># @GetMapping</h3><p>也是一个组合注解，相当于@RequestMapping(method = RequestMethod.GET)的缩写。 类似的还有<code>@PostMapping、@PutMapping、@DeleteMapping</code>。</p><h3 id="PathVariable"><a href="#PathVariable" class="headerlink" title="# @PathVariable"></a># @PathVariable</h3><p>这里出现了<code>@PathVariable，@Pathvariable</code>注解可以绑定占位符传过来的值到方法的参数上。</p><h3 id="RequestParam"><a href="#RequestParam" class="headerlink" title="# @RequestParam"></a># @RequestParam</h3><p>从请求中提取参数,如果传入参数名字和方法参数名字不一致，可以给@RequestParam的属性赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(value = &quot;login&quot;)</span><br><span class="line">public void login(@RequestParam(&quot;account&quot;) String name, @RequestParam String password) &#123;</span><br><span class="line">    System.out.println(name + &quot;:&quot; + password);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RequestBody"><a href="#RequestBody" class="headerlink" title="# @RequestBody"></a># @RequestBody</h3><p>可以用来解析json字符串(还可以解析xml)，并将字符串映射到对应的实体中，实体的字段名和json中的键名要对应。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(path = &quot;register&quot;)</span><br><span class="line">public String registerUser(@RequestBody User user) &#123;</span><br><span class="line">    return user.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="# @RequestHeader"></a># @RequestHeader</h3><p>注解用来将请求头的内容绑定到方法参数上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(value = &quot;login&quot;)</span><br><span class="line">public void login(@RequestHeader(&quot;access_token&quot;) String accessToken,@RequestParam String name) &#123;</span><br><span class="line">    System.out.println(&quot;accessToken:&quot; + accessToken);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Value 为了简化从 properties 中取配置,可以使用 @Value</p><p>application.properties</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Value(&quot;$&#123;wx_appid&#125;&quot;)</span><br><span class="line">private String appid;</span><br></pre></td></tr></table></figure><h3 id="Valid"><a href="#Valid" class="headerlink" title="# @Valid"></a># @Valid</h3><p>网上一大片使用@Valid失效不能用的情况。为什么呢？</p><p>1.@Valid必需使用在以@RequestBody接收参数的情况下。</p><p>2.使用ajax以POST方式提示数据，禁止用Fiddler以及浏览器直接访问的方式测试接口</p><p>3.用&lt;mvc:annotation-driven /&gt;添加注解驱动。</p><p>4.@Valid是应用在javabean上的校验。</p><p>全部参数校验如下：</p><p>空检查</p><p>@Null       验证对象是否为null</p><p>@NotNull    验证对象是否不为null, 无法查检长度为0的字符串</p><p>@NotBlank 检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.</p><p>@NotEmpty 检查约束元素是否为NULL或者是EMPTY.</p><p>Booelan检查</p><p>@AssertTrue     验证 Boolean 对象是否为 true </p><p>@AssertFalse    验证 Boolean 对象是否为 false </p><p>长度检查</p><p>@Size(min=, max=) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内 </p><p>@Length(min=, max=)验证注解的元素值长度在min和max区间内</p><p>日期检查</p><p>@Past           验证 Date 和 Calendar 对象是否在当前时间之前 </p><p>@Future     验证 Date 和 Calendar 对象是否在当前时间之后 </p><p>@Pattern    验证 String 对象是否符合正则表达式的规则</p><p>数值检查，建议使用在Stirng,Integer类型，不建议使用在int类型上，因为表单值为“”时无法转换为int，但可以转换为Stirng为””,Integer为null</p><p>@Min(value=””)            验证 Number 和 String 对象是否大等于指定的值 </p><p>@Max(value=””)             验证 Number 和 String 对象是否小等于指定的值 </p><p>@DecimalMax(value=值) 被标注的值必须不大于约束中指定的最大值. 这个约束的参数是一个通过BigDecimal定义的最大值的字符串表示.小数存在精度</p><p>@DecimalMin(value=值) 被标注的值必须不小于约束中指定的最小值. 这个约束的参数是一个通过BigDecimal定义的最小值的字符串表示.小数存在精度</p><p>@Digits     验证 Number 和 String 的构成是否合法 </p><p>@Digits(integer=,fraction=)验证字符串是否是符合指定格式的数字，interger指定整数精度，fraction指定小数精度。</p><p>@Range(min=, max=) 检查数字是否介于min和max之间.</p><p>@Range(min=10000,max=50000,message=”range.bean.wage”)</p><p>private BigDecimal wage;</p><p>@Valid 递归的对关联对象进行校验, 如果关联对象是个集合或者数组,那么对其中的元素进行递归校验,如果是一个map,则对其中的值部分进行校验.(是否进行递归验证)</p><p>@CreditCardNumber信用卡验证</p><p>@Email  验证是否是邮件地址，如果为null,不进行验证，算通过验证。</p><p>@ScriptAssert(lang=,script=, alias=)</p><p>@URL(protocol=,host=,port=,regexp=, flags=)</p><h3 id="Scope"><a href="#Scope" class="headerlink" title="# @Scope"></a># @Scope</h3><p>singleton：单例，即容器里只有一个实例对象。</p><p>request：对每一次HTTP请求都会产生一个新的bean，同时该bean仅在当前HTTP request内有效</p><p>prototype：多对象，每一次请求都会产生一个新的bean实例</p><h3 id="元注解包括-Retention-Target-Document-Inherited"><a href="#元注解包括-Retention-Target-Document-Inherited" class="headerlink" title="# 元注解包括 @Retention  @Target @Document @Inherited"></a># 元注解包括 @Retention  @Target @Document @Inherited</h3><p><strong>@Retention: 定义注解的保留策略：</strong></p><p>@Retention(RetentionPolicy.SOURCE)   //注解仅存在于源码中，在class字节码文件中不包含</p><p>@Retention(RetentionPolicy.CLASS)     //默认的保留策略，注解会在class字节码文件中存在，但运行时无法获得，</p><p>@Retention(RetentionPolicy.RUNTIME)  //注解会在class字节码文件中存在，在运行时可以通过反射获取到</p><p><strong>@Target：定义注解的作用目标:</strong></p><p>@Target(ElementType.TYPE)   //接口、类、枚举、注解</p><p>@Target(ElementType.FIELD) //字段、枚举的常量</p><p>@Target(ElementType.METHOD) //方法</p><p>@Target(ElementType.PARAMETER) //方法参数</p><p>@Target(ElementType.CONSTRUCTOR)  //构造函数</p><p>@Target(ElementType.LOCAL_VARIABLE)//局部变量</p><p>@Target(ElementType.ANNOTATION_TYPE)//注解</p><p>@Target(ElementType.PACKAGE) ///包   </p><p> 由以上的源码可以知道，他的elementType 可以有多个，一个注解可以为类的，方法的，字段的等等</p><p><strong>@Document：说明该注解将被包含在javadoc中</strong></p><p><strong>@Inherited：说明子类可以继承父类中的该注解</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringCloud-注解&quot;&gt;&lt;a href=&quot;#SpringCloud-注解&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud 注解&quot;&gt;&lt;/a&gt;SpringCloud 注解&lt;/h1&gt;&lt;h3 id=&quot;SpringBootApplica
      
    
    </summary>
    
      <category term="笔记" scheme="https://www.whatdy.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="https://www.whatdy.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>阿里云支持 ipv6</title>
    <link href="https://www.whatdy.com/2018/03/21/%E9%98%BF%E9%87%8C%E4%BA%91%E6%94%AF%E6%8C%81-ipv6/"/>
    <id>https://www.whatdy.com/2018/03/21/阿里云支持-ipv6/</id>
    <published>2018-03-20T16:29:45.000Z</published>
    <updated>2018-03-21T13:11:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基础"><a href="#基础" class="headerlink" title="# 基础"></a># 基础</h3><ul><li>Ubuntu 16.04</li><li>tunnelbroker ipv6 隧道地址</li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="# 步骤"></a># 步骤</h3><p>启用 IPv6 的主要有四步：</p><ul><li>注册并创建 IPv6 通道</li><li>配置 ECS 使其支持 IPv6</li><li>配置 Nginx 使其监听 IPv6 端口</li><li>配置 DNS 使其支持 IPv6 解析</li></ul><h4 id="第一步：注册并创建-IPv6-通道"><a href="#第一步：注册并创建-IPv6-通道" class="headerlink" title="第一步：注册并创建 IPv6 通道"></a>第一步：注册并创建 IPv6 通道</h4><ul><li>注册 <a href="https://www.tunnelbroker.net/" target="_blank" rel="noopener">https://www.tunnelbroker.net/</a> （需要邮箱验证）</li><li>点击 <a href="https://www.tunnelbroker.net/new_tunnel.php" target="_blank" rel="noopener">Create Regular Tunnel</a></li><li>在IPv4 Endpoint (Your side)处填上 ECS 的 IPv4 地址</li><li>在Available Tunnel Servers中选择Hong Kong, HK（如果你面向海外用户，可以选择更接近目标用户的地区）<br>点击Create Tunnel后，通道就创建完成了</li></ul><h4 id="第二步：配置-ECS-使其支持-IPv6"><a href="#第二步：配置-ECS-使其支持-IPv6" class="headerlink" title="第二步：配置 ECS 使其支持 IPv6"></a>第二步：配置 ECS 使其支持 IPv6</h4><p>编辑/etc/sysctl.conf，将以下三项的配置改成0</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net.ipv6.conf.all.disable_ipv6 = 0</span><br><span class="line">net.ipv6.conf.default.disable_ipv6 = 0</span><br><span class="line">net.ipv6.conf.lo.disable_ipv6 = 0</span><br></pre></td></tr></table></figure><p>在/etc/network/interfaces底部加上以下内容（注：下面大写的处，需要替换成你在 HE 得到的Server IPv6 Address，但不包括最后的::1/64，如：2001:470:100:100）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">auto he-ipv6</span><br><span class="line">iface he-ipv6 inet6 v4tunnel</span><br><span class="line">address &lt;IPV6&gt;::2</span><br><span class="line">netmask 64</span><br><span class="line">remote &lt;HE 的 Server IPv4 Address&gt;</span><br><span class="line">local &lt;阿里云的 IPv4 地址(Notice: 是 DHCP服务获取的IPv4地址,而不是提供给 tunnelbroker 的那个地址 )&gt;</span><br><span class="line">endpoint any</span><br><span class="line">ttl 255</span><br><span class="line">gateway &lt;IPv6&gt;::1</span><br><span class="line">up ip -6 route add 2000::/3 via ::&lt;HE 的 Server IPv4 Address&gt; dev he-ipv6</span><br><span class="line">up ip -6 addr add &lt;IPv6&gt;::1:1/128 dev he-ipv6</span><br><span class="line">up ip -6 addr add &lt;IPv6&gt;::2:1/128 dev he-ipv6</span><br><span class="line">down ip -6 route flush dev he-ipv6</span><br></pre></td></tr></table></figure><p>重启服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 检测</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ifup he-ipv6</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 重启 网卡</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ifdown he-ipv6 &amp;&amp; ifup he-ipv6</span></span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="# 参考"></a># 参考</h3><p><a href="https://jiandanxinli.github.io/2016-08-06.html" target="_blank" rel="noopener">https://jiandanxinli.github.io/2016-08-06.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;# 基础&quot;&gt;&lt;/a&gt;# 基础&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Ubuntu 16.04&lt;/li&gt;
&lt;li&gt;tunnelbroker ipv6 隧道地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 
      
    
    </summary>
    
      <category term="笔记" scheme="https://www.whatdy.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="网络安全" scheme="https://www.whatdy.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>网络安全相关命令</title>
    <link href="https://www.whatdy.com/2018/03/21/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <id>https://www.whatdy.com/2018/03/21/网络安全相关命令/</id>
    <published>2018-03-20T16:26:14.000Z</published>
    <updated>2018-03-21T13:11:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mac"><a href="#mac" class="headerlink" title="# mac"></a># mac</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 获取全部 网络服务</span></span></span><br><span class="line">networksetup -listallnetworkservices</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 获取 wifi 的信息</span></span></span><br><span class="line">networksetup -getinfo Wi-Fi</span><br></pre></td></tr></table></figure><h3 id="ICMP"><a href="#ICMP" class="headerlink" title="# ICMP"></a># ICMP</h3><p>ICMP (Internet Control Message Protocol)</p><h3 id="路由表"><a href="#路由表" class="headerlink" title="# 路由表"></a># 路由表</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># ===&gt; mac </span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 列出 route table</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> netstat -nr</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 只显示 IPV4 路由</span></span></span><br><span class="line">netstat -nr -f inet</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 只显示 IPV6 路由</span></span></span><br><span class="line">netstat -nr -f inet6</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># route 操作 route table</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># ===&gt; linux</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 列出 route,以及操作 route table</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> route</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line">default         172.16.79.253   0.0.0.0         UG    0      0        0 eth0</span><br></pre></td></tr></table></figure><p>向路由表添加一个路由信息 一般来说，都是为了能访问别的子网才设置路由的</p><p>操作 route table<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">route add -net 224.0.0.0 netmask 240.0.0.0 reject</span><br><span class="line">route del -net 224.0.0.0 netmask 240.0.0.0 reject</span><br></pre></td></tr></table></figure></p><p>参考: <a href="http://luodw.cc/2015/12/30/network-command/" target="_blank" rel="noopener">http://luodw.cc/2015/12/30/network-command/</a><br><a href="http://network.51cto.com/art/201503/469761.htm" target="_blank" rel="noopener">http://network.51cto.com/art/201503/469761.htm</a></p><p>分类:<br>（1）链路层协议发现的路由（即是直连路由）<br>（2）静态路由<br>（3）动态路由协议发现的路由。</p><h3 id="route-命令"><a href="#route-命令" class="headerlink" title="# route 命令"></a># route 命令</h3><ul><li>ARP 地址解析协议</li></ul><p><a href="https://baike.baidu.com/item/%E8%B7%AF%E7%94%B1%E8%A1%A8" target="_blank" rel="noopener">https://baike.baidu.com/item/%E8%B7%AF%E7%94%B1%E8%A1%A8</a></p><h3 id="nslookup-和-dig"><a href="#nslookup-和-dig" class="headerlink" title="# nslookup 和 dig"></a># nslookup 和 dig</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nslookup www.baidu.com</span></span><br><span class="line"></span><br><span class="line">Server:192.168.0.1</span><br><span class="line">Address:192.168.0.1#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">www.baidu.comcanonical name = www.a.shifen.com.</span><br><span class="line">Name:www.a.shifen.com</span><br><span class="line">Address: 115.239.211.112</span><br><span class="line">Name:www.a.shifen.com</span><br><span class="line">Address: 115.239.210.27</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> dig trace www.baidu.com</span></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">www.baidu.com.300INCNAMEwww.a.shifen.com.</span><br><span class="line">www.a.shifen.com.300INA115.239.210.27</span><br><span class="line">www.a.shifen.com.300INA115.239.211.112</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> host baidu.com        </span></span><br><span class="line">baidu.com has address 123.125.114.144</span><br><span class="line">baidu.com has address 220.181.57.216</span><br><span class="line">baidu.com has address 111.13.101.208</span><br><span class="line">baidu.com mail is handled by 15 mx.n.shifen.com.</span><br><span class="line">baidu.com mail is handled by 10 mx.maillb.baidu.com.</span><br><span class="line">baidu.com mail is handled by 20 mx1.baidu.com.</span><br><span class="line">baidu.com mail is handled by 20 jpmx.baidu.com.</span><br><span class="line">baidu.com mail is handled by 20 mx50.baidu.com.</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># host -a baidu.com</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># -a 参数,输出 和 dig baidu.com 一样详细</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># host -t ns baidu.com</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># -t 查询执行类型的记录</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># soa 权威域名服务器的选项</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># host -C baidu.com</span></span></span><br></pre></td></tr></table></figure><p>参考: <a href="http://luodw.cc/2015/12/27/dns03/" target="_blank" rel="noopener">http://luodw.cc/2015/12/27/dns03/</a></p><h3 id="arp"><a href="#arp" class="headerlink" title="# arp"></a># arp</h3><p>原理: <a href="http://blog.csdn.net/Linux_ever/article/details/50516502" target="_blank" rel="noopener">http://blog.csdn.net/Linux_ever/article/details/50516502</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看 ip 和 mac 映射</span></span><br><span class="line">arp -a</span><br><span class="line"><span class="meta">#</span><span class="bash"> 清除 eth0 网卡的arp信息</span></span><br><span class="line">arp -d -i eth0 -a</span><br><span class="line"><span class="meta">#</span><span class="bash"> 利用 tcpdump 观察 arp 信息 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 观察 dst,src 为 172.16.78.9 的 数据流</span></span><br><span class="line">tcpdump -i eth0 -ent '(dst 172.16.78.9 or  src 172.16.78.9)'</span><br></pre></td></tr></table></figure><h3 id="Linux-下查看局域网内所有主机IP和MAC"><a href="#Linux-下查看局域网内所有主机IP和MAC" class="headerlink" title="# Linux 下查看局域网内所有主机IP和MAC"></a># Linux 下查看局域网内所有主机IP和MAC</h3><p><a href="http://blog.csdn.net/keepsmi1e/article/details/9370049" target="_blank" rel="noopener">http://blog.csdn.net/keepsmi1e/article/details/9370049</a></p><p>用 nmap 对局域网扫描一遍,然后查看 arp 缓存表就可以知道局域网内 ip 对应的 mac 了.<br>nmap比较强大也可以直接扫描mac地址和端口。执行扫描之后就可以 cat/proc/net/arp查看arp缓存表了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进行 ping 扫描,打印出对扫描做出相应的主机</span></span><br><span class="line">nmap -sP 192.168.0.1/24</span><br><span class="line"><span class="meta">#</span><span class="bash"> 仅列出指定网络上的每台主机,不发送任何报文到目标主机</span></span><br><span class="line">nmap -sL 192.168.0.1/24</span><br><span class="line"><span class="meta">#</span><span class="bash"> 探测目标主机开放的端口，可以指定一个以逗号分隔的端口列表(如-PS22，23，25，80)</span></span><br><span class="line">nmap -PS 118.31.78.77</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用UDPping探测主机</span></span><br><span class="line">nmap -PU 192.168.0.1/24</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用频率最高的扫描选项（SYN扫描,又称为半开放扫描），它不打开一个完全的TCP连接，执行得很快：　</span></span><br><span class="line">nmap -sS 192.168.1.0/24</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在文件ipandmaclist.txt文件中就可以查看ip对应的mac地址了。</span></span><br><span class="line">nmap -sP -PI -PT -oN ipandmaclist.txt 192.168.0.1/24</span><br></pre></td></tr></table></figure><h3 id="traceroute"><a href="#traceroute" class="headerlink" title="# traceroute"></a># traceroute</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">traceroute www.baidu.com</span><br></pre></td></tr></table></figure><h3 id="mac-相关命令"><a href="#mac-相关命令" class="headerlink" title="# mac 相关命令"></a># mac 相关命令</h3><p><a href="https://www.jianshu.com/p/f4edc2632710" target="_blank" rel="noopener">https://www.jianshu.com/p/f4edc2632710</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">使用 dig 来诊断域名信息</span><br><span class="line">dig www.oschina.net A dig www.oschina.net MX</span><br><span class="line">查看谁正在登录到你的 Mac 机器</span><br><span class="line">w</span><br><span class="line">显示系统路由表</span><br><span class="line">netstat -r</span><br><span class="line">显示活动网络连接</span><br><span class="line">netstat -an</span><br><span class="line">显示网络统计</span><br><span class="line">netstat -s</span><br></pre></td></tr></table></figure><h3 id="tcpdump-抓包命令"><a href="#tcpdump-抓包命令" class="headerlink" title="# tcpdump 抓包命令"></a># tcpdump 抓包命令</h3><p><a href="http://luodw.cc/2015/12/30/network-command/" target="_blank" rel="noopener">http://luodw.cc/2015/12/30/network-command/</a></p><p>强大的抓包命令.当udp程序收到icmp不可达数据包时，用户程序是不会知道的，所以用tcpdump看到，因为tcpdump可以解析所有到大网络层的数据包，包括icmp，arp等等。当然还有udp,tcp。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 默认监听所有网络接口的流量</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tcpdump</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 监听指定网络接口</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tcpdump -i eth0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 监听tcp</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tcpdump tcp</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tcpdump udp</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 监听指定主机,可以是主机名或者ip</span></span></span><br><span class="line">tcpdump host Charles</span><br><span class="line">tcpdump host 192.168.1.151</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 监听端口</span></span></span><br><span class="line">tcpdump port 8080</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 截获主机hostname发送的所有数据</span></span></span><br><span class="line">tcpdump -i eth0 src host hostname</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 监视所有送到主机hostname的数据包</span></span></span><br><span class="line">tcpdump -i eth0 dst host hostname</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 监视指定主机和端口的数据包</span></span></span><br><span class="line">如果想要获取主机 118.31.78.77 接收或发出的telnet包，使用如下命令</span><br><span class="line">sudo tcpdump tcp port 4000 and host 118.31.78.77</span><br><span class="line">对本机的udp 123 端口进行监视 123 为ntp的服务端口</span><br><span class="line">tcpdump udp port 123</span><br></pre></td></tr></table></figure><h3 id="netstat-命令"><a href="#netstat-命令" class="headerlink" title="# netstat 命令"></a># netstat 命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 默认情况下，netstat输出的是所有已连接的tcp,udp和unix域套接字</span></span><br><span class="line">netstat | more</span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有的端口（包括监听和未监听的） </span></span><br><span class="line">netstat -a</span><br><span class="line"><span class="meta">#</span><span class="bash"> 只列出所有的tcp连接 </span></span><br><span class="line">netstat -at</span><br><span class="line"><span class="meta">#</span><span class="bash"> 只列出所有的udp连接 </span></span><br><span class="line">netstat -au</span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有处于监听的连接，包括tcp,udp和unix域套接字 </span></span><br><span class="line">netstat -l</span><br><span class="line"><span class="meta">#</span><span class="bash"> 只列出tcp监听端口 </span></span><br><span class="line">netstat -lt</span><br><span class="line"><span class="meta">#</span><span class="bash"> 只列出udp监听端口 </span></span><br><span class="line">netstat -lu</span><br><span class="line"><span class="meta">#</span><span class="bash"> 只列出unix域套接字监听端口 </span></span><br><span class="line">netstat -lx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看路由表信息 netstat -r</span></span><br><span class="line"></span><br><span class="line">Routing tables</span><br><span class="line"></span><br><span class="line">Internet:</span><br><span class="line">Destination        Gateway            Flags        Refs      Use   Netif Expire</span><br><span class="line">default            192.168.0.1        UGSc           11        0     en0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一般有两条路由信息，一个是默认路由，即目的地地址不在本网络时，通过网络接口eth0，传到网关192.168.1.1这个也就是第一跳路由器的地址；如果目的地地址是在同一个局域网中，即与子网掩码255.255.255.0与之后=192.168.1.0，则没有网关，通过eth0广播询问即可。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询网络接口列表 </span></span><br><span class="line">netstat -i</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 找出程序运行的端口 </span></span><br><span class="line"></span><br><span class="line">netstat -ap | grep ssh</span><br></pre></td></tr></table></figure><h3 id="ifconfig"><a href="#ifconfig" class="headerlink" title="# ifconfig"></a># ifconfig</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 启动 eth0 网卡</span></span></span><br><span class="line">ifconfig eth0 up</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 查看 eth0 网卡</span></span></span><br><span class="line">ifocnfig eth0</span><br></pre></td></tr></table></figure><h3 id="ivp6"><a href="#ivp6" class="headerlink" title="# ivp6"></a># ivp6</h3><p><a href="http://test-ipv6.com/" target="_blank" rel="noopener">http://test-ipv6.com/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 修改dns</span></span></span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line">nameserver 114.114.114.114</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash">  应当得到一个 AAAA 记录而不出现错误 </span></span><br><span class="line">dig aaaa aaaa.v6ns.test-ipv6.com</span><br></pre></td></tr></table></figure><h3 id="ufw"><a href="#ufw" class="headerlink" title="# ufw"></a># ufw</h3><p>Ubuntu 16.04 防火墙</p><p>千万别手贱开启,否则 ssh 都连接不进去…vpn 遇到过..</p><h3 id="ndp"><a href="#ndp" class="headerlink" title="# ndp"></a># ndp</h3><p>NDP用来发现直接相连的邻居信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ndp -an</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;mac&quot;&gt;&lt;a href=&quot;#mac&quot; class=&quot;headerlink&quot; title=&quot;# mac&quot;&gt;&lt;/a&gt;# mac&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="笔记" scheme="https://www.whatdy.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="shell" scheme="https://www.whatdy.com/tags/shell/"/>
    
      <category term="网络安全" scheme="https://www.whatdy.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>brew 常用命令</title>
    <link href="https://www.whatdy.com/2018/03/21/brew-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://www.whatdy.com/2018/03/21/brew-常用命令/</id>
    <published>2018-03-20T16:01:12.000Z</published>
    <updated>2018-03-21T13:11:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个使用 mac 的 developer,一定知道 brew 这个命令.</p><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="# 目录结构"></a># 目录结构</h4><p>/usr/local/Cellar  brew 安装目录<br>/usr/local/etc     brew 配置目录<br>/usr/local/bin     brew 命令目录(优先级大于 /usr/bin)</p><h4 id="下面记录了一些常用的brew命令"><a href="#下面记录了一些常用的brew命令" class="headerlink" title="# 下面记录了一些常用的brew命令"></a># 下面记录了一些常用的<code>brew</code>命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装某个应用</span></span><br><span class="line">brew install xx</span><br><span class="line"><span class="comment"># 搜索安装包</span></span><br><span class="line">brew search xxx</span><br><span class="line"><span class="comment"># 安装扩展&lt;gihhub_user/repo&gt;   ,可以获得更多的资源</span></span><br><span class="line">brew tap josegonzalez/php </span><br><span class="line"><span class="comment">#查看安装的扩展列表</span></span><br><span class="line">brew tap </span><br><span class="line"><span class="comment">#查看 php72 安装选项</span></span><br><span class="line">brew options php72</span><br><span class="line"><span class="comment">#查看系统通过 brew 安装的服务</span></span><br><span class="line">brew services list </span><br><span class="line"><span class="comment">#清除已卸载无用的启动配置文件</span></span><br><span class="line">brew services cleanup</span><br><span class="line"><span class="comment">#也可以用上文提到的brew命令来管理php-fpm</span></span><br><span class="line">brew services start|stop|restart php72</span><br><span class="line"><span class="comment"># 更新某个包</span></span><br><span class="line">brew upgrade [ package_name ]</span><br><span class="line"><span class="comment">#查看这个包的信息，从中我们可以得知有哪些选项可选。</span></span><br><span class="line">brew info [ package_name ]  </span><br><span class="line"><span class="comment"># 卸载对应包名字</span></span><br><span class="line">brew uninstall [ package_name ]</span><br><span class="line"><span class="comment"># 列出过时的包</span></span><br><span class="line">brew outdated</span><br><span class="line"><span class="comment"># 更新过时的包，不带包名就跟新所有包</span></span><br><span class="line">brew upgrade [ package_name ]</span><br><span class="line"><span class="comment"># 更新 HomeBrew自身</span></span><br><span class="line"> brew update</span><br></pre></td></tr></table></figure><h4 id="brew-cask"><a href="#brew-cask" class="headerlink" title="# brew cask"></a># brew cask</h4><p>brew cask 用于安装 gui 界面的软件(例如 chrome)</p><p><strong>#实用工具</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 快速查看 json 文件的结构</span></span><br><span class="line">brew cask install google-chrome</span><br><span class="line"><span class="comment"># 预览markdown文档</span></span><br><span class="line">brew cask install qlmarkdown</span><br><span class="line"><span class="comment"># .....</span></span><br><span class="line">brew cask install alfred</span><br><span class="line">brew cask install appcleaner</span><br><span class="line">brew cask install cheatsheet</span><br><span class="line">brew cask install dropbox</span><br><span class="line">brew cask install google-chrome</span><br><span class="line">brew cask install onepassword</span><br><span class="line">brew cask install sublime-text</span><br><span class="line">brew cask install totalfinder</span><br></pre></td></tr></table></figure></p><h4 id="其他"><a href="#其他" class="headerlink" title="# 其他"></a># 其他</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 进入 brew 缓存目录,安装包首先会下载到当前目录,然后才会安装,所以我们可以事先现在好安装包来提高下载速度</span></span><br><span class="line"><span class="built_in">cd</span> `brew --cache`</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为一个使用 mac 的 developer,一定知道 brew 这个命令.&lt;/p&gt;
&lt;h4 id=&quot;目录结构&quot;&gt;&lt;a href=&quot;#目录结构&quot; class=&quot;headerlink&quot; title=&quot;# 目录结构&quot;&gt;&lt;/a&gt;# 目录结构&lt;/h4&gt;&lt;p&gt;/usr/local/C
      
    
    </summary>
    
      <category term="笔记" scheme="https://www.whatdy.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="mac" scheme="https://www.whatdy.com/tags/mac/"/>
    
      <category term="shell" scheme="https://www.whatdy.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>hexo 基本命令</title>
    <link href="https://www.whatdy.com/2018/03/20/hexo%20%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
    <id>https://www.whatdy.com/2018/03/20/hexo 基本命令/</id>
    <published>2018-03-19T16:00:43.000Z</published>
    <updated>2018-03-19T16:00:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
